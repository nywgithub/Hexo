{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/even/source/favicon.ico","path":"favicon.ico","modified":1,"renderable":1},{"_id":"themes/even/source/robots.txt","path":"robots.txt","modified":1,"renderable":1},{"_id":"themes/even/source/css/style.scss","path":"css/style.scss","modified":1,"renderable":1},{"_id":"themes/even/source/fonts/chancery/apple-chancery-webfont.eot","path":"fonts/chancery/apple-chancery-webfont.eot","modified":1,"renderable":1},{"_id":"themes/even/source/fonts/chancery/apple-chancery-webfont.svg","path":"fonts/chancery/apple-chancery-webfont.svg","modified":1,"renderable":1},{"_id":"themes/even/source/fonts/chancery/apple-chancery-webfont.ttf","path":"fonts/chancery/apple-chancery-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/even/source/fonts/chancery/apple-chancery-webfont.woff","path":"fonts/chancery/apple-chancery-webfont.woff","modified":1,"renderable":1},{"_id":"themes/even/source/fonts/chancery/apple-chancery-webfont.woff2","path":"fonts/chancery/apple-chancery-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/even/source/lib/fancybox/blank.gif","path":"lib/fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/even/source/lib/fancybox/fancybox_loading.gif","path":"lib/fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/even/source/lib/fancybox/fancybox_loading@2x.gif","path":"lib/fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/even/source/lib/fancybox/fancybox_overlay.png","path":"lib/fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/even/source/lib/fancybox/fancybox_sprite.png","path":"lib/fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/even/source/lib/fancybox/fancybox_sprite@2x.png","path":"lib/fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/even/source/lib/fancybox/jquery.fancybox.css","path":"lib/fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/even/source/lib/fancybox/jquery.fancybox.js","path":"lib/fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/even/source/lib/fancybox/jquery.fancybox.pack.js","path":"lib/fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/even/source/lib/jquery/jquery.min.js","path":"lib/jquery/jquery.min.js","modified":1,"renderable":1},{"_id":"themes/even/source/lib/slideout/slideout.js","path":"lib/slideout/slideout.js","modified":1,"renderable":1},{"_id":"themes/even/source/lib/slideout/slideout.min.js","path":"lib/slideout/slideout.min.js","modified":1,"renderable":1},{"_id":"themes/even/source/js/src/even.js","path":"js/src/even.js","modified":1,"renderable":1},{"_id":"themes/even/source/lib/fancybox/helpers/fancybox_buttons.png","path":"lib/fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/even/source/lib/fancybox/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/even/source/lib/fancybox/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/even/source/lib/fancybox/helpers/jquery.fancybox-media.js","path":"lib/fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/even/source/lib/fancybox/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/even/source/lib/fancybox/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":499162500000},{"_id":"themes/landscape/.npmignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":499162500000},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":499162500000},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":499162500000},{"_id":"themes/landscape/_config.yml","hash":"79ac6b9ed6a4de5a21ea53fc3f5a3de92e2475ff","modified":499162500000},{"_id":"themes/landscape/README.md","hash":"37fae88639ef60d63bd0de22314d7cc4c5d94b07","modified":499162500000},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":499162500000},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":499162500000},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":499162500000},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":499162500000},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":499162500000},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":499162500000},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":499162500000},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":499162500000},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":499162500000},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":499162500000},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":499162500000},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":499162500000},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":499162500000},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":499162500000},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":499162500000},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":499162500000},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":499162500000},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":499162500000},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":499162500000},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":499162500000},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":499162500000},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":499162500000},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"db7c99cfd199c173c8f33eef5eb02272908e4872","modified":1632445986118},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"d0d753d39038284d52b10e5075979cc97db9cd20","modified":499162500000},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":499162500000},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":499162500000},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":499162500000},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":499162500000},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":499162500000},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"7e749050be126eadbc42decfbea75124ae430413","modified":499162500000},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":499162500000},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"4f5a2bbcbcbe20455c22bf98b435751c2b6a8be8","modified":1632445986118},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":499162500000},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":499162500000},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":499162500000},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":499162500000},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":499162500000},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":499162500000},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":499162500000},{"_id":"themes/landscape/source/css/_variables.styl","hash":"628e307579ea46b5928424313993f17b8d729e92","modified":499162500000},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":499162500000},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":499162500000},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":499162500000},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":499162500000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":499162500000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":499162500000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":499162500000},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":499162500000},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":499162500000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":499162500000},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":499162500000},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":499162500000},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":499162500000},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":499162500000},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":499162500000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":499162500000},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":499162500000},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":499162500000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":499162500000},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":499162500000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":499162500000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":499162500000},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":499162500000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":499162500000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":499162500000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":499162500000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":499162500000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":499162500000},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":499162500000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":499162500000},{"_id":"public/2021/09/18/hello-world/index.html","hash":"211d80a4b4857f708514a63dcfc86f15c1773b3b","modified":1631953886484},{"_id":"public/archives/index.html","hash":"7d2613643d35047659bb7bc410d9782c0c7e51e2","modified":1632907222396},{"_id":"public/archives/2021/index.html","hash":"3d7bf7bfcc6e860d5d013922692aa1b2675db18d","modified":1632907222396},{"_id":"public/archives/2021/09/index.html","hash":"046b0d72f5b0ed3b565c476d778d8d0c06a5a8c5","modified":1632907222396},{"_id":"public/index.html","hash":"96d194e00d09f2f9a42e4ee1ba20d85b332d0a61","modified":1633676389365},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1631952745561},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1631952745561},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1631952745561},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1631952745561},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1631952745561},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1631952745561},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1631952745561},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1631952745561},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1631952745561},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1631952745561},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1631952745561},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1631952745561},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1631952745561},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1631952745561},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1631952745561},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1631952745561},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1631952745561},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1631952745561},{"_id":"public/css/style.css","hash":"5f8dadd37d0052c557061018fe6f568f64fced9b","modified":1631952745561},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1631952745561},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1631952745561},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1631952745561},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1631952745561},{"_id":"source/_posts/简介.md","hash":"cd673917e960d829de0ed07db0560858c0fc922d","modified":1632445986053},{"_id":"public/2021/09/18/简介/index.html","hash":"0bb2c776cba51e64d97917a683dee681b82f3e79","modified":1632317439078},{"_id":"source/_posts/Restful.md","hash":"ec7a3a1dd254f6d4d1882f6cf35b41955ed74c29","modified":1632445986052},{"_id":"themes/even/README.md","hash":"18d6bbd43b5bdf8875a2328a3ef5834e92e9cd96","modified":1619281155000},{"_id":"themes/even/LICENSE","hash":"187fc7598698ac70c7ab9dffaa08883fd8b91958","modified":1619281155000},{"_id":"themes/even/_config.yml.example","hash":"5e1dda1f4790a6c733c51164e2450ed86d0ec10c","modified":1619281155000},{"_id":"themes/even/layout/_layout.swig","hash":"00dc81c1d5751144a59de05db415c51954973230","modified":1619281155000},{"_id":"themes/even/package.json","hash":"fbd41d067538a26bcb0386367935a5e91da48058","modified":1619281155000},{"_id":"themes/even/layout/archive.swig","hash":"fde460d3c38ad132ef5effbdbaf66c48c8296c3b","modified":1619281155000},{"_id":"themes/even/layout/categories.swig","hash":"a14078a46bc45e1e02c1bc450dc894d693975707","modified":1619281155000},{"_id":"themes/even/yarn.lock","hash":"ff5d63b50f76b4b6f36661c012ffca2af7ba9dff","modified":1619281155000},{"_id":"themes/even/layout/index.swig","hash":"4bc20e7616ace7cf12c17328cb84b8203b763b09","modified":1619281155000},{"_id":"themes/even/layout/page.swig","hash":"a6cf4e5bc3cb9a9ea6a6ed3b074cff6d69073f14","modified":1619281155000},{"_id":"themes/even/layout/post.swig","hash":"88f3f7538c75271133d00f3b1a0d0a40ec953c8d","modified":1619281155000},{"_id":"themes/even/layout/tags.swig","hash":"ce15107017d6e1663f2b0be92d7758622e17861f","modified":1619281155000},{"_id":"themes/even/languages/zh-CN.yml","hash":"f7da3fc6252df9d19abd1321b3c5a8c2ad13cca7","modified":1619281155000},{"_id":"themes/even/languages/en.yml","hash":"42df6a0f6f21778f20779f6b0336df65a59c890d","modified":1619281155000},{"_id":"themes/even/languages/zh-TW.yml","hash":"c275550aded8b4173f9965a627eedf1d727f3da3","modified":1619281155000},{"_id":"themes/even/languages/default.yml","hash":"42df6a0f6f21778f20779f6b0336df65a59c890d","modified":1619281155000},{"_id":"themes/even/layout/_macro/archive.swig","hash":"641f02ccabc1cc59ecc73f2a40516088495e9ff9","modified":1619281155000},{"_id":"themes/even/layout/_macro/post.swig","hash":"671faa8fc3374ce900f57487d9e53bc8a5f2f592","modified":1619281155000},{"_id":"themes/even/source/favicon.ico","hash":"0505cec3b99707df7a681de37177b3cf7950cc5d","modified":1619281155000},{"_id":"themes/even/layout/_partial/footer.swig","hash":"418855b4ace54609431c52e091506e7a6180d433","modified":1619281155000},{"_id":"themes/even/layout/_partial/header.swig","hash":"2c3a0fba88605a98b56528437e1c2160942cdba4","modified":1619281155000},{"_id":"themes/even/layout/_partial/pagination.swig","hash":"caab675c3c1df76d5c047d5c4dc42ffcb79caa9a","modified":1619281155000},{"_id":"themes/even/layout/_partial/head.swig","hash":"b18d4f4b5ce4ea3c3ba5c3d4a1300f9fc3a5b15e","modified":1619281155000},{"_id":"themes/even/layout/_partial/comments.swig","hash":"f60c042be03c113377900f6fd46635f50c1a3c80","modified":1619281155000},{"_id":"themes/even/layout/_partial/slideout.swig","hash":"ecfaa8a922eef7d0c6eb05592d390ae36d6da9e3","modified":1619281155000},{"_id":"themes/even/layout/_script/comments.swig","hash":"76b88bca6080243ee1054a98053b04db57d423d7","modified":1619281155000},{"_id":"themes/even/layout/_script/analytics.swig","hash":"b1fe6eb7e42594383dba5e5a6a9ed655158e1f25","modified":1619281155000},{"_id":"themes/even/source/robots.txt","hash":"eed1ebad39b24e7942fcaf8f27da7487eb9f956e","modified":1619281155000},{"_id":"themes/even/layout/_script/counter.swig","hash":"787d956687d4846286b11c68fb2a81a0d981d4b1","modified":1619281155000},{"_id":"themes/even/layout/_script/libs.swig","hash":"668e0939e5c22bcf5437afdd398a7fd16c0059a0","modified":1619281155000},{"_id":"themes/even/layout/_script/theme.swig","hash":"ef8207e22d10ba11821749e1dc0041cf0104d7e3","modified":1619281155000},{"_id":"themes/even/source/css/_base.scss","hash":"ffd8c02b4e1dde0433458b0fef02f01a1fd0f1dd","modified":1619281155000},{"_id":"themes/even/layout/_script/push.swig","hash":"2aacb350e2e4870f175ba4783c710c4c4006274c","modified":1619281155000},{"_id":"themes/even/layout/_partial/_footer/social.swig","hash":"45159378a4abd916367a5a10cf39eabb0d460c70","modified":1619281155000},{"_id":"themes/even/layout/_partial/_head/meta.swig","hash":"067665118c38c2f579f801ff53bab0d32b28109c","modified":1619281155000},{"_id":"themes/even/source/css/_variables.scss","hash":"a32d1aa88bf6c81af01a0ad87d0cdc9beb17bfa1","modified":1619281155000},{"_id":"themes/even/layout/_partial/_post/copyright.swig","hash":"517533bf6cb5292a55be11036ef72d699acc33ef","modified":1619281155000},{"_id":"themes/even/layout/_partial/_post/reward.swig","hash":"2a026a5252082c5cc9fbbb5aedf29770d1d56e62","modified":1619281155000},{"_id":"themes/even/source/css/style.scss","hash":"814c81baf2d6fe1acdaf5319c3fa796c260a2d3c","modified":1619281155000},{"_id":"themes/even/layout/_partial/_post/toc.swig","hash":"3eb2de1ad24607af9497663149730292227022cf","modified":1619281155000},{"_id":"themes/even/layout/_script/_analytics/baidu-analytics.swig","hash":"707864f34f7750a438817acef927f1e4075c5cf8","modified":1619281155000},{"_id":"themes/even/layout/_script/_analytics/google-analytics.swig","hash":"5143d9e510bfd98723a009780ba23aebade21b29","modified":1619281155000},{"_id":"themes/even/layout/_script/_comments/changyan.swig","hash":"a14f06c0ab2eff5c1039cbf199328a62fdc3def8","modified":1619281155000},{"_id":"themes/even/layout/_script/_comments/cusdis.swig","hash":"8bc1430e52c7ba6700430628df1fc7d8b7c6b0c3","modified":1619281155000},{"_id":"themes/even/layout/_script/_comments/disqus.swig","hash":"52009d5092377937af79ea9e391262d34df6d36f","modified":1619281155000},{"_id":"themes/even/layout/_script/_comments/gitalk.swig","hash":"869e4e4bca23ccd9be61fa671dd2b327b5b6e86c","modified":1619281155000},{"_id":"themes/even/layout/_script/_comments/utterances.swig","hash":"5772689ec4c0a772d0e51311535080544fcb2bdd","modified":1619281155000},{"_id":"themes/even/layout/_script/_comments/livere.swig","hash":"dfc42123f637b775cf85967476cb8439d19dbe4c","modified":1619281155000},{"_id":"themes/even/source/css/_common/_animation.scss","hash":"f32d2444f0ab4dcb8b811ae1bccae6073f21a988","modified":1619281155000},{"_id":"themes/even/source/css/_common/_normalize.scss","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1619281155000},{"_id":"themes/even/source/css/_common/_utils.scss","hash":"9ec5b1f6cf47260eba2729ff4931111b808644f0","modified":1619281155000},{"_id":"themes/even/source/css/_custom/_custom.scss","hash":"d0873cd8554d515282a6792fcc3f5bd4a256b7a6","modified":1619281155000},{"_id":"themes/even/source/fonts/chancery/apple-chancery-webfont.eot","hash":"fef78bd502f74fdbf0316123e176454cb3eb4e50","modified":1619281155000},{"_id":"themes/even/source/fonts/chancery/apple-chancery-webfont.ttf","hash":"5e25c531901d8a9e37ab45a7f4acdbe5324b51b6","modified":1619281155000},{"_id":"themes/even/source/lib/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1619281155000},{"_id":"themes/even/source/fonts/chancery/apple-chancery-webfont.woff","hash":"95beafe485d4bdbddfecbcf3b2bc9b2d9cf5f5c5","modified":1619281155000},{"_id":"themes/even/source/lib/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1619281155000},{"_id":"themes/even/source/fonts/chancery/apple-chancery-webfont.woff2","hash":"afd0f74128f1c21c5a542b2e100870e74da663b6","modified":1619281155000},{"_id":"themes/even/source/lib/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1619281155000},{"_id":"themes/even/source/lib/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1619281155000},{"_id":"themes/even/source/lib/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1619281155000},{"_id":"themes/even/source/lib/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1619281155000},{"_id":"themes/even/source/lib/fancybox/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1619281155000},{"_id":"themes/even/source/lib/fancybox/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1619281155000},{"_id":"themes/even/source/lib/fancybox/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1619281155000},{"_id":"themes/even/source/css/_partial/_archive.scss","hash":"c0cd7dc3462f7726428a30f5852fcf5577df5961","modified":1619281155000},{"_id":"themes/even/source/css/_partial/_back-to-top.scss","hash":"de94a4546dad90f588e902c9641d94b31fd6625b","modified":1619281155000},{"_id":"themes/even/source/css/_partial/_footer.scss","hash":"76f3a72440be8aa1e93d8ddc5ea958777d1545ab","modified":1619281155000},{"_id":"themes/even/source/css/_partial/_categories.scss","hash":"96f47000d25ef4e0e948f8f43fa4e2983ff0d746","modified":1619281155000},{"_id":"themes/even/source/css/_partial/_iconfont.scss","hash":"6effdc886469ee76f3c66451ef4b04baaecd48ef","modified":1619281155000},{"_id":"themes/even/source/css/_partial/_header.scss","hash":"4a3e92feef33bed0021f1a65a801c24ee7d5946f","modified":1619281155000},{"_id":"themes/even/source/css/_partial/_mathjax.scss","hash":"4005390d40cfc457e4d07dbaf78b718e01b651f4","modified":1619281155000},{"_id":"themes/even/source/css/_partial/_pagination.scss","hash":"b24db39534e180ebcebba2e81d91d9f1d534eea1","modified":1619281155000},{"_id":"themes/even/source/css/_partial/_slideout.scss","hash":"e4820a42698f647a824575b234835b9ce4ac4797","modified":1619281155000},{"_id":"themes/even/source/css/_partial/_tags.scss","hash":"fb4bf54b34291d5b72598a7ba4d3e370c8ad9383","modified":1619281155000},{"_id":"themes/even/source/css/_partial/_mobile.scss","hash":"0d1c60bd92f8e5db01e7843934251152ec4d6d44","modified":1619281155000},{"_id":"themes/even/source/css/_partial/_post.scss","hash":"655e8f56328a220b64d54c400990165a015fecd9","modified":1619281155000},{"_id":"themes/even/source/js/src/even.js","hash":"e15f39b54da71226e8dca3fa2fa9be8dda1f5e75","modified":1619281155000},{"_id":"themes/even/source/lib/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1619281155000},{"_id":"themes/even/source/lib/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1619281155000},{"_id":"themes/even/source/lib/fancybox/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1619281155000},{"_id":"themes/even/source/lib/slideout/slideout.js","hash":"81ec76a63f6f4bbdfc801d822182ab8afa9068fe","modified":1619281155000},{"_id":"themes/even/source/lib/slideout/slideout.min.js","hash":"7166ed307b771398a593fc3d4f1c5d93fbbe19bb","modified":1619281155000},{"_id":"themes/even/source/lib/fancybox/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1619281155000},{"_id":"themes/even/source/lib/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1619281155000},{"_id":"themes/even/source/lib/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1619281155000},{"_id":"themes/even/source/css/_partial/_header/_logo.scss","hash":"109073dde15146d835bf06faa2f256d1ac658315","modified":1619281155000},{"_id":"themes/even/source/css/_partial/_header/_menu.scss","hash":"454214ab2b5a0ca17d6872068c52bfd01ac02fdc","modified":1619281155000},{"_id":"themes/even/source/css/_partial/_footer/_copyright.scss","hash":"afbc0f90c674e5cd5fd7509eb1296d60b999d4e1","modified":1619281155000},{"_id":"themes/even/source/css/_partial/_post/_code.scss","hash":"4accdb9fdda9818c700ce309f28575de18e04228","modified":1619281155000},{"_id":"themes/even/source/css/_partial/_footer/_social.scss","hash":"bca6a1036951c2475278bfbd3a5ce51ff861e9a3","modified":1619281155000},{"_id":"themes/even/source/css/_partial/_post/_content.scss","hash":"7cf29c7af82c31d82f09dedfca09ea2d863b92ff","modified":1619281155000},{"_id":"themes/even/source/css/_partial/_post/_copyright.scss","hash":"3a53f708b9dec34426460e3ad7cb29c335e1f7b8","modified":1619281155000},{"_id":"themes/even/source/css/_partial/_post/_footer.scss","hash":"9f2ab0ac20b2a8bfd315febd387c399f72f43d10","modified":1619281155000},{"_id":"themes/even/source/css/_partial/_post/_header.scss","hash":"f655fc254804e59d1426471f41127f26d06432b6","modified":1619281155000},{"_id":"themes/even/source/css/_partial/_post/_reward.scss","hash":"66ec9faa27ed879dc9a2ca59c73ed6bfd5e61dcd","modified":1619281155000},{"_id":"themes/even/source/css/_partial/_post/_toc.scss","hash":"5806ce8d5c4e2d70e12e03ab48327bdebc68c67b","modified":1619281155000},{"_id":"themes/even/source/fonts/chancery/apple-chancery-webfont.svg","hash":"a94e508f306a742637653f98c6e8827b11d3c142","modified":1619281155000},{"_id":"themes/even/source/lib/jquery/jquery.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1619281155000},{"_id":"public/2021/09/22/Restful/index.html","hash":"b09e534effd66a3647bde068691094873f012cc7","modified":1632907222396},{"_id":"public/robots.txt","hash":"5b993731c1d47a344d4903552a7929a7e0805b31","modified":1632446047725},{"_id":"public/favicon.ico","hash":"0505cec3b99707df7a681de37177b3cf7950cc5d","modified":1632317439078},{"_id":"public/fonts/chancery/apple-chancery-webfont.eot","hash":"fef78bd502f74fdbf0316123e176454cb3eb4e50","modified":1632317439078},{"_id":"public/lib/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1632317439078},{"_id":"public/fonts/chancery/apple-chancery-webfont.woff","hash":"95beafe485d4bdbddfecbcf3b2bc9b2d9cf5f5c5","modified":1632317439078},{"_id":"public/fonts/chancery/apple-chancery-webfont.woff2","hash":"afd0f74128f1c21c5a542b2e100870e74da663b6","modified":1632317439078},{"_id":"public/lib/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1632317439078},{"_id":"public/fonts/chancery/apple-chancery-webfont.ttf","hash":"5e25c531901d8a9e37ab45a7f4acdbe5324b51b6","modified":1632317439078},{"_id":"public/lib/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1632317439078},{"_id":"public/lib/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1632317439078},{"_id":"public/lib/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1632317439078},{"_id":"public/lib/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1632317439078},{"_id":"public/lib/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1632317439078},{"_id":"public/fonts/chancery/apple-chancery-webfont.svg","hash":"1a1f74d6ffcf9abea2d21be7c1ed1ad7dd44dfc1","modified":1632446047725},{"_id":"public/css/style.scss","hash":"c2f5d61cb0034c5c672ed35a804e1d103d66d32b","modified":1632446047725},{"_id":"public/lib/fancybox/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1632317439078},{"_id":"public/lib/slideout/slideout.min.js","hash":"7166ed307b771398a593fc3d4f1c5d93fbbe19bb","modified":1632317439078},{"_id":"public/lib/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1632317439078},{"_id":"public/js/src/even.js","hash":"e15f39b54da71226e8dca3fa2fa9be8dda1f5e75","modified":1632317439078},{"_id":"public/lib/fancybox/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1632317439078},{"_id":"public/lib/fancybox/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1632317439078},{"_id":"public/lib/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1632317439078},{"_id":"public/lib/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1632317439078},{"_id":"public/lib/fancybox/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1632317439078},{"_id":"public/lib/fancybox/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1632317439078},{"_id":"public/lib/slideout/slideout.js","hash":"81ec76a63f6f4bbdfc801d822182ab8afa9068fe","modified":1632317439078},{"_id":"public/lib/jquery/jquery.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1632317439078},{"_id":"public/2021/09/22/简介/index.html","hash":"f4c733c791661270b7abc84d7d1af589f757b9d0","modified":1632317983599},{"_id":"source/_posts/call-apply-bind.md","hash":"1ef831a04272f30cf2c32d7c6fbdda3100c06d36","modified":1632448821754},{"_id":"source/.DS_Store","hash":"94674ef8780e0cc59aac7ed80bf8d8bc13e74ef4","modified":1632405284344},{"_id":"public/2021/09/23/call-apply-bind/index.html","hash":"a9efb11d5225d66dc0941edb5c4bbde75d245ab0","modified":1632907222396},{"_id":"public/2021/09/21/简介/index.html","hash":"2c92940b546fb536ec0ee9fe1c37dc9cca85ae9e","modified":1632907222396},{"_id":"source/_posts/sass语法练习.md","hash":"c3db7c723a0bde8786e8cc78810265bd7c4299cb","modified":1632448798865},{"_id":"public/2021/09/24/sass语法练习/index.html","hash":"5745f6736f20b5645b19f31adf87fb62c53adf0a","modified":1632907222396},{"_id":"source/_posts/js继承的6种方式.md","hash":"e671e6072ee0401c578b0c23f4faea1c57450ea9","modified":1632623827235},{"_id":"public/2021/09/24/js继承的6种方式/index.html","hash":"862cf9ded580f40923389b2928acfa5b229a0fa1","modified":1632623778055},{"_id":"public/2021/09/25/js继承的6种方式/index.html","hash":"a7fb9ad8cd184ea150c51d44246d535842cacb53","modified":1632907222396},{"_id":"source/_posts/正则表达式.md","hash":"5dd82c07e3a3aad9df7a092de908d35f29778494","modified":1632654271666},{"_id":"public/2021/09/26/正则表达式/index.html","hash":"82dc586db0987597c932c53ece51c59fe45b60a9","modified":1632907222396},{"_id":"source/_posts/class语法.md","hash":"e0946fbad0696284956867f85069db4650d2411d","modified":1633676273935},{"_id":"source/_posts/小技巧.md","hash":"6ccf9161b0b225ae3495db2931a0eb08db99f626","modified":1633676331298},{"_id":"public/2021/09/28/class语法/index.html","hash":"83ca7fab7a9c97d6fe0b3aeb2ba8f6ad405ffa9a","modified":1633676389365},{"_id":"public/2021/09/28/小技巧/index.html","hash":"a85ab5a2e66450a0d623133903552c2cc029edff","modified":1633676389365},{"_id":"source/_posts/Vue3新特性.md","hash":"d7ecee0b41cd9400962913dd33b8d168f0233146","modified":1632898329971},{"_id":"public/2021/09/29/Vue3新特性/index.html","hash":"458c004eeedb6f660a788524ffe525b4f5e98c07","modified":1632907222396}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"hello","date":"2021-09-21T13:21:51.000Z","_content":"\nHere is some personal information about me:\n\n- 🔭 I'm Chinese and currently working in NanJing.\n- 📖 I'm currently learning && using React.js/Next.js...\n- 🌱 Ask me about any question about my repos or directly give me a issue/pr~\n\n","source":"_posts/简介.md","raw":"---\ntitle: hello\ndate: 2021-09-21 21:21:51\ntags:\n---\n\nHere is some personal information about me:\n\n- 🔭 I'm Chinese and currently working in NanJing.\n- 📖 I'm currently learning && using React.js/Next.js...\n- 🌱 Ask me about any question about my repos or directly give me a issue/pr~\n\n","slug":"简介","published":1,"updated":"2021-09-24T01:13:06.053Z","_id":"cktpj5k6c0000hsvd4zovfbu5","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Here is some personal information about me:</p>\n<ul>\n<li>🔭 I’m Chinese and currently working in NanJing.</li>\n<li>📖 I’m currently learning &amp;&amp; using React.js/Next.js…</li>\n<li>🌱 Ask me about any question about my repos or directly give me a issue/pr~</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>Here is some personal information about me:</p>\n<ul>\n<li>🔭 I’m Chinese and currently working in NanJing.</li>\n<li>📖 I’m currently learning &amp;&amp; using React.js/Next.js…</li>\n<li>🌱 Ask me about any question about my repos or directly give me a issue/pr~</li>\n</ul>\n"},{"title":"Restful","date":"2021-09-22T13:21:51.000Z","_content":"\n首先是拆分单词 Representational State Transfer\n\n- 资源(Resources)\n资源就是请求获取的数据，一首歌，一个单词，一张图片等等。。\n\n- 表现层（Representation）\n资源的表现形式，可以理解为文本的格式，数据的格式，图片的格式\n\n- 状态转化（State Transfer）\n访问网站的过程，就是客户端和服务端的交互过程，这其中就涉及到数据和状态的改变\n\n综合上面的解释，我们总结一下什么是RESTful架构：\n\n（1）每一个URI代表一种资源；\n\n（2）客户端和服务器之间，传递这种资源的某种表现层；\n\n（3）客户端通过四个HTTP动词，对服务器端资源进行操作，实现\"表现层状态转化\"。\n","source":"_posts/Restful.md","raw":"---\ntitle: Restful\ndate: 2021-09-22 21:21:51\ntags:\n---\n\n首先是拆分单词 Representational State Transfer\n\n- 资源(Resources)\n资源就是请求获取的数据，一首歌，一个单词，一张图片等等。。\n\n- 表现层（Representation）\n资源的表现形式，可以理解为文本的格式，数据的格式，图片的格式\n\n- 状态转化（State Transfer）\n访问网站的过程，就是客户端和服务端的交互过程，这其中就涉及到数据和状态的改变\n\n综合上面的解释，我们总结一下什么是RESTful架构：\n\n（1）每一个URI代表一种资源；\n\n（2）客户端和服务器之间，传递这种资源的某种表现层；\n\n（3）客户端通过四个HTTP动词，对服务器端资源进行操作，实现\"表现层状态转化\"。\n","slug":"Restful","published":1,"updated":"2021-09-24T01:13:06.052Z","_id":"cktvjch0f0000fsnl8a2vby0f","comments":1,"layout":"post","photos":[],"link":"","content":"<p>首先是拆分单词 Representational State Transfer</p>\n<ul>\n<li><p>资源(Resources)<br>资源就是请求获取的数据，一首歌，一个单词，一张图片等等。。</p>\n</li>\n<li><p>表现层（Representation）<br>资源的表现形式，可以理解为文本的格式，数据的格式，图片的格式</p>\n</li>\n<li><p>状态转化（State Transfer）<br>访问网站的过程，就是客户端和服务端的交互过程，这其中就涉及到数据和状态的改变</p>\n</li>\n</ul>\n<p>综合上面的解释，我们总结一下什么是RESTful架构：</p>\n<p>（1）每一个URI代表一种资源；</p>\n<p>（2）客户端和服务器之间，传递这种资源的某种表现层；</p>\n<p>（3）客户端通过四个HTTP动词，对服务器端资源进行操作，实现”表现层状态转化”。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>首先是拆分单词 Representational State Transfer</p>\n<ul>\n<li><p>资源(Resources)<br>资源就是请求获取的数据，一首歌，一个单词，一张图片等等。。</p>\n</li>\n<li><p>表现层（Representation）<br>资源的表现形式，可以理解为文本的格式，数据的格式，图片的格式</p>\n</li>\n<li><p>状态转化（State Transfer）<br>访问网站的过程，就是客户端和服务端的交互过程，这其中就涉及到数据和状态的改变</p>\n</li>\n</ul>\n<p>综合上面的解释，我们总结一下什么是RESTful架构：</p>\n<p>（1）每一个URI代表一种资源；</p>\n<p>（2）客户端和服务器之间，传递这种资源的某种表现层；</p>\n<p>（3）客户端通过四个HTTP动词，对服务器端资源进行操作，实现”表现层状态转化”。</p>\n"},{"title":"call,apply和bind","date":"2021-09-23T13:01:37.000Z","_content":"\n- call,apply改变函数的this指向,重新定义函数的执行环境，并直接执行函数\n    call:func.call(context, arg1, arg2, ...),多个参数依次排列\n    apply:func.apply(context, arguments)，多个参数写成数组的展开形式\n    context是上下文环境，函数的this将指向context\n    如果call和apply的第一个参数是null，this指向window\n\n- bind不会直接执行函数，会返回一个改变this指向后的boundfounction\n- 用法\n    1. call和apply是为了动态改变this而出现的，当一个object没有某个方法，但是其他的有，我们可以借助call或apply用其它对象的方法来操作。\n    ```javascript \n        ;(function(){\n            function cat(){\n            }\n            cat.prototype={\n                food:\"fish\",     \n                say: function(){\n                    alert(\"I love \"+this.food);\n                }\n            }\n            var blackCat = new cat;\n            blackCat.say();\n        })()\n    ```\n    如果此时有一个whitedog = {food:\"bone\"}\n    也需要调用say()方法，可以用call和apply实现：\n    blackCat.say.call(whiteDog)。\n\n    2. Array.prototype.slice.call(arguments)\n    用的比较多的，通过document.getElementsByTagName选择的dom 节点是一种类似array的array。它不能应用Array下的push,pop等方法。我们可以通过：\n    ```javascript    \n        var domNodes =  Array.prototype.slice.call(document.getElementsByTagName(\"*\"));\n    ```\n    这样domNodes就可以应用Array下的所有方法了。\n\n    3. 实现js继承\n    ```javascript\n        //父类\n        function Person(name, height) {\n            this.sayInfo = function() {\n                return \"姓名：\" + name + \", 身高：\" + height + \", 体重：\" + this.weight;\n            }\n        }\n        //子类\n        function Chinese(name, height, weight) {\n            Person.call(this, name, height);\n            this.weight = weight;\n            \n            this.nation = function() {\n                console.log(\"我是中国人\");\n            }\n        }\n        //子类\n        function America(name, height, weight) {\n            Person.apply(this, [name, height]);\n            this.weight = weight;\n        }\n\n        let chiness = new Chinese(\"成龙\", \"178cm\", \"60kg\");\n        console.log(chiness.sayInfo());    //姓名：成龙, 身高：178cm, 体重：60kg\n        let america = new America(\"jack\", \"180cm\", \"55kg\");\n        console.log(america.sayInfo());    //姓名：jack, 身高：180cm, 体重：55kg\n    ```","source":"_posts/call-apply-bind.md","raw":"---\ntitle: 'call,apply和bind'\ndate: 2021-09-23 21:01:37\ntags:\n---\n\n- call,apply改变函数的this指向,重新定义函数的执行环境，并直接执行函数\n    call:func.call(context, arg1, arg2, ...),多个参数依次排列\n    apply:func.apply(context, arguments)，多个参数写成数组的展开形式\n    context是上下文环境，函数的this将指向context\n    如果call和apply的第一个参数是null，this指向window\n\n- bind不会直接执行函数，会返回一个改变this指向后的boundfounction\n- 用法\n    1. call和apply是为了动态改变this而出现的，当一个object没有某个方法，但是其他的有，我们可以借助call或apply用其它对象的方法来操作。\n    ```javascript \n        ;(function(){\n            function cat(){\n            }\n            cat.prototype={\n                food:\"fish\",     \n                say: function(){\n                    alert(\"I love \"+this.food);\n                }\n            }\n            var blackCat = new cat;\n            blackCat.say();\n        })()\n    ```\n    如果此时有一个whitedog = {food:\"bone\"}\n    也需要调用say()方法，可以用call和apply实现：\n    blackCat.say.call(whiteDog)。\n\n    2. Array.prototype.slice.call(arguments)\n    用的比较多的，通过document.getElementsByTagName选择的dom 节点是一种类似array的array。它不能应用Array下的push,pop等方法。我们可以通过：\n    ```javascript    \n        var domNodes =  Array.prototype.slice.call(document.getElementsByTagName(\"*\"));\n    ```\n    这样domNodes就可以应用Array下的所有方法了。\n\n    3. 实现js继承\n    ```javascript\n        //父类\n        function Person(name, height) {\n            this.sayInfo = function() {\n                return \"姓名：\" + name + \", 身高：\" + height + \", 体重：\" + this.weight;\n            }\n        }\n        //子类\n        function Chinese(name, height, weight) {\n            Person.call(this, name, height);\n            this.weight = weight;\n            \n            this.nation = function() {\n                console.log(\"我是中国人\");\n            }\n        }\n        //子类\n        function America(name, height, weight) {\n            Person.apply(this, [name, height]);\n            this.weight = weight;\n        }\n\n        let chiness = new Chinese(\"成龙\", \"178cm\", \"60kg\");\n        console.log(chiness.sayInfo());    //姓名：成龙, 身高：178cm, 体重：60kg\n        let america = new America(\"jack\", \"180cm\", \"55kg\");\n        console.log(america.sayInfo());    //姓名：jack, 身高：180cm, 体重：55kg\n    ```","slug":"call-apply-bind","published":1,"updated":"2021-09-24T02:00:21.754Z","_id":"cktwy2baj0000p5nl5xs24usc","comments":1,"layout":"post","photos":[],"link":"","content":"<ul>\n<li><p>call,apply改变函数的this指向,重新定义函数的执行环境，并直接执行函数<br>  call:func.call(context, arg1, arg2, …),多个参数依次排列<br>  apply:func.apply(context, arguments)，多个参数写成数组的展开形式<br>  context是上下文环境，函数的this将指向context<br>  如果call和apply的第一个参数是null，this指向window</p>\n</li>\n<li><p>bind不会直接执行函数，会返回一个改变this指向后的boundfounction</p>\n</li>\n<li><p>用法</p>\n<ol>\n<li><p>call和apply是为了动态改变this而出现的，当一个object没有某个方法，但是其他的有，我们可以借助call或apply用其它对象的方法来操作。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">;(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">cat</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cat.prototype=&#123;</span><br><span class=\"line\">        <span class=\"attr\">food</span>:<span class=\"string\">&quot;fish&quot;</span>,     </span><br><span class=\"line\">        <span class=\"attr\">say</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            alert(<span class=\"string\">&quot;I love &quot;</span>+<span class=\"built_in\">this</span>.food);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> blackCat = <span class=\"keyword\">new</span> cat;</span><br><span class=\"line\">    blackCat.say();</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n<p>如果此时有一个whitedog = {food:”bone”}<br>也需要调用say()方法，可以用call和apply实现：<br>blackCat.say.call(whiteDog)。</p>\n</li>\n<li><p>Array.prototype.slice.call(arguments)<br>用的比较多的，通过document.getElementsByTagName选择的dom 节点是一种类似array的array。它不能应用Array下的push,pop等方法。我们可以通过：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> domNodes =  <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&quot;*&quot;</span>));</span><br></pre></td></tr></table></figure>\n<p>这样domNodes就可以应用Array下的所有方法了。</p>\n</li>\n<li><p>实现js继承</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//父类</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, height</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.sayInfo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;姓名：&quot;</span> + name + <span class=\"string\">&quot;, 身高：&quot;</span> + height + <span class=\"string\">&quot;, 体重：&quot;</span> + <span class=\"built_in\">this</span>.weight;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//子类</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Chinese</span>(<span class=\"params\">name, height, weight</span>) </span>&#123;</span><br><span class=\"line\">    Person.call(<span class=\"built_in\">this</span>, name, height);</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.weight = weight;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">this</span>.nation = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;我是中国人&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//子类</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">America</span>(<span class=\"params\">name, height, weight</span>) </span>&#123;</span><br><span class=\"line\">    Person.apply(<span class=\"built_in\">this</span>, [name, height]);</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.weight = weight;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> chiness = <span class=\"keyword\">new</span> Chinese(<span class=\"string\">&quot;成龙&quot;</span>, <span class=\"string\">&quot;178cm&quot;</span>, <span class=\"string\">&quot;60kg&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(chiness.sayInfo());    <span class=\"comment\">//姓名：成龙, 身高：178cm, 体重：60kg</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> america = <span class=\"keyword\">new</span> America(<span class=\"string\">&quot;jack&quot;</span>, <span class=\"string\">&quot;180cm&quot;</span>, <span class=\"string\">&quot;55kg&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(america.sayInfo());    <span class=\"comment\">//姓名：jack, 身高：180cm, 体重：55kg</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><p>call,apply改变函数的this指向,重新定义函数的执行环境，并直接执行函数<br>  call:func.call(context, arg1, arg2, …),多个参数依次排列<br>  apply:func.apply(context, arguments)，多个参数写成数组的展开形式<br>  context是上下文环境，函数的this将指向context<br>  如果call和apply的第一个参数是null，this指向window</p>\n</li>\n<li><p>bind不会直接执行函数，会返回一个改变this指向后的boundfounction</p>\n</li>\n<li><p>用法</p>\n<ol>\n<li><p>call和apply是为了动态改变this而出现的，当一个object没有某个方法，但是其他的有，我们可以借助call或apply用其它对象的方法来操作。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">;(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">cat</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cat.prototype=&#123;</span><br><span class=\"line\">        <span class=\"attr\">food</span>:<span class=\"string\">&quot;fish&quot;</span>,     </span><br><span class=\"line\">        <span class=\"attr\">say</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            alert(<span class=\"string\">&quot;I love &quot;</span>+<span class=\"built_in\">this</span>.food);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> blackCat = <span class=\"keyword\">new</span> cat;</span><br><span class=\"line\">    blackCat.say();</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n<p>如果此时有一个whitedog = {food:”bone”}<br>也需要调用say()方法，可以用call和apply实现：<br>blackCat.say.call(whiteDog)。</p>\n</li>\n<li><p>Array.prototype.slice.call(arguments)<br>用的比较多的，通过document.getElementsByTagName选择的dom 节点是一种类似array的array。它不能应用Array下的push,pop等方法。我们可以通过：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> domNodes =  <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&quot;*&quot;</span>));</span><br></pre></td></tr></table></figure>\n<p>这样domNodes就可以应用Array下的所有方法了。</p>\n</li>\n<li><p>实现js继承</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//父类</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, height</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.sayInfo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;姓名：&quot;</span> + name + <span class=\"string\">&quot;, 身高：&quot;</span> + height + <span class=\"string\">&quot;, 体重：&quot;</span> + <span class=\"built_in\">this</span>.weight;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//子类</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Chinese</span>(<span class=\"params\">name, height, weight</span>) </span>&#123;</span><br><span class=\"line\">    Person.call(<span class=\"built_in\">this</span>, name, height);</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.weight = weight;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">this</span>.nation = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;我是中国人&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//子类</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">America</span>(<span class=\"params\">name, height, weight</span>) </span>&#123;</span><br><span class=\"line\">    Person.apply(<span class=\"built_in\">this</span>, [name, height]);</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.weight = weight;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> chiness = <span class=\"keyword\">new</span> Chinese(<span class=\"string\">&quot;成龙&quot;</span>, <span class=\"string\">&quot;178cm&quot;</span>, <span class=\"string\">&quot;60kg&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(chiness.sayInfo());    <span class=\"comment\">//姓名：成龙, 身高：178cm, 体重：60kg</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> america = <span class=\"keyword\">new</span> America(<span class=\"string\">&quot;jack&quot;</span>, <span class=\"string\">&quot;180cm&quot;</span>, <span class=\"string\">&quot;55kg&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(america.sayInfo());    <span class=\"comment\">//姓名：jack, 身高：180cm, 体重：55kg</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n</ul>\n"},{"title":"sass语法练习","date":"2021-09-24T01:45:55.000Z","_content":"## @extend | 选择器 | & | mixin\n- **@extend**\n```css\n.error {\n  border: 1px #f00;\n  background-color: #fdd;\n}\n.seriousError {\n  @extend .error;\n  border-width: 3px;\n}\n```\n将error的样式继承给seriousError\n\n- **选择器**\n选择器>、+和~\n```css\nheader > p { font-size: 1.1em }\n```\n选择article 后面紧跟着的子元素中的section元素\n```css\nheader + p { font-size: 1.1em }\n```\n选择header  后面紧跟的p元素\n```css\nheader ~ p { font-size: 1.1em }\n```\n选择header  同一层的p元素\n- **&**\n```css\n#main {\n  $width: 5em !global;\n  width: $width;\n}\n\n#sidebar {\n  width: $width;\n}\n```\n变量&开头, ！global可将块级作用域变为全局左作用域\n```css\np:before {\n  content: \"I ate #{5 + 10} pies!\";\n}\n\np {\n  $font-size: 12px;\n  $line-height: 30px;\n  font: #{$font-size}/#{$line-height};\n}\n```\n#{}为动态变量\n- **mixin**\n```css\n//$point 是参数\n@mixin breakpoint($point){\n    @media only screen and (max-width: $point) {\n        @content;\n    }\n}\n\n@mixin point-sm{\n    @include breakpoint($breakpoint-sm){\n        //此处可加其他自定义样式代码\n        @content;    \n    }\n}\n\n@mixin point-md{\n    @include breakpoint($breakpoint-md){\n        @content;    \n    }\n}\n\n@mixin point-lg{\n    @include breakpoint($breakpoint-lg){\n        @content;    \n    }\n}\n\n@mixin point-xlg{\n    @include breakpoint($breakpoint-xlg){\n        @content;    \n    }\n}\n\n/*\n.demo{\n    @include point-sm{\n        background: #ccc;\n    }\n}\n */\n```\n\n","source":"_posts/sass语法练习.md","raw":"---\ntitle: sass语法练习\ndate: 2021-09-24 09:45:55\ntags:\n---\n## @extend | 选择器 | & | mixin\n- **@extend**\n```css\n.error {\n  border: 1px #f00;\n  background-color: #fdd;\n}\n.seriousError {\n  @extend .error;\n  border-width: 3px;\n}\n```\n将error的样式继承给seriousError\n\n- **选择器**\n选择器>、+和~\n```css\nheader > p { font-size: 1.1em }\n```\n选择article 后面紧跟着的子元素中的section元素\n```css\nheader + p { font-size: 1.1em }\n```\n选择header  后面紧跟的p元素\n```css\nheader ~ p { font-size: 1.1em }\n```\n选择header  同一层的p元素\n- **&**\n```css\n#main {\n  $width: 5em !global;\n  width: $width;\n}\n\n#sidebar {\n  width: $width;\n}\n```\n变量&开头, ！global可将块级作用域变为全局左作用域\n```css\np:before {\n  content: \"I ate #{5 + 10} pies!\";\n}\n\np {\n  $font-size: 12px;\n  $line-height: 30px;\n  font: #{$font-size}/#{$line-height};\n}\n```\n#{}为动态变量\n- **mixin**\n```css\n//$point 是参数\n@mixin breakpoint($point){\n    @media only screen and (max-width: $point) {\n        @content;\n    }\n}\n\n@mixin point-sm{\n    @include breakpoint($breakpoint-sm){\n        //此处可加其他自定义样式代码\n        @content;    \n    }\n}\n\n@mixin point-md{\n    @include breakpoint($breakpoint-md){\n        @content;    \n    }\n}\n\n@mixin point-lg{\n    @include breakpoint($breakpoint-lg){\n        @content;    \n    }\n}\n\n@mixin point-xlg{\n    @include breakpoint($breakpoint-xlg){\n        @content;    \n    }\n}\n\n/*\n.demo{\n    @include point-sm{\n        background: #ccc;\n    }\n}\n */\n```\n\n","slug":"sass语法练习","published":1,"updated":"2021-09-24T01:59:58.865Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktxpx1660000sgvd7twfaca8","content":"<h2 id=\"extend-选择器-amp-mixin\"><a href=\"#extend-选择器-amp-mixin\" class=\"headerlink\" title=\"@extend | 选择器 | &amp; | mixin\"></a>@extend | 选择器 | &amp; | mixin</h2><ul>\n<li><p><strong>@extend</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.error</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> <span class=\"number\">#f00</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#fdd</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.seriousError</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">@extend</span> .error;</span><br><span class=\"line\">  <span class=\"attribute\">border-width</span>: <span class=\"number\">3px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>将error的样式继承给seriousError</p>\n</li>\n<li><p><strong>选择器</strong><br>选择器&gt;、+和~</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">header</span> &gt; <span class=\"selector-tag\">p</span> &#123; <span class=\"attribute\">font-size</span>: <span class=\"number\">1.1em</span> &#125;</span><br></pre></td></tr></table></figure>\n<p>选择article 后面紧跟着的子元素中的section元素</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">header</span> + <span class=\"selector-tag\">p</span> &#123; <span class=\"attribute\">font-size</span>: <span class=\"number\">1.1em</span> &#125;</span><br></pre></td></tr></table></figure>\n<p>选择header  后面紧跟的p元素</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">header</span> ~ <span class=\"selector-tag\">p</span> &#123; <span class=\"attribute\">font-size</span>: <span class=\"number\">1.1em</span> &#125;</span><br></pre></td></tr></table></figure>\n<p>选择header  同一层的p元素</p>\n</li>\n<li><p><strong>&amp;</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#main</span> &#123;</span><br><span class=\"line\">  $<span class=\"attribute\">width</span>: <span class=\"number\">5em</span> !global;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: $width;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#sidebar</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: $width;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>变量&amp;开头, ！global可将块级作用域变为全局左作用域</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">p</span>:before &#123;</span><br><span class=\"line\">  content: <span class=\"string\">&quot;I ate #&#123;5 + 10&#125; pies!&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">  $<span class=\"attribute\">font-size</span>: <span class=\"number\">12px</span>;</span><br><span class=\"line\">  $<span class=\"attribute\">line-height</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font</span>: #&#123;$font-size&#125;/#&#123;$<span class=\"attribute\">line-height</span>&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>#{}为动态变量</p>\n</li>\n<li><p><strong>mixin</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//$point 是参数</span><br><span class=\"line\"><span class=\"keyword\">@mixin</span> breakpoint($point)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">@media</span> <span class=\"keyword\">only</span> screen <span class=\"keyword\">and</span> (<span class=\"attribute\">max-width</span>: $point) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">@content</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@mixin</span> point-sm&#123;</span><br><span class=\"line\">    <span class=\"keyword\">@include</span> breakpoint($breakpoint-sm)&#123;</span><br><span class=\"line\">        //此处可加其他自定义样式代码</span><br><span class=\"line\">        <span class=\"keyword\">@content</span>;    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@mixin</span> point-md&#123;</span><br><span class=\"line\">    <span class=\"keyword\">@include</span> breakpoint($breakpoint-md)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">@content</span>;    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@mixin</span> point-lg&#123;</span><br><span class=\"line\">    <span class=\"keyword\">@include</span> breakpoint($breakpoint-lg)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">@content</span>;    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@mixin</span> point-xlg&#123;</span><br><span class=\"line\">    <span class=\"keyword\">@include</span> breakpoint($breakpoint-xlg)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">@content</span>;    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">.demo&#123;</span></span><br><span class=\"line\"><span class=\"comment\">    @include point-sm&#123;</span></span><br><span class=\"line\"><span class=\"comment\">        background: #ccc;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"extend-选择器-amp-mixin\"><a href=\"#extend-选择器-amp-mixin\" class=\"headerlink\" title=\"@extend | 选择器 | &amp; | mixin\"></a>@extend | 选择器 | &amp; | mixin</h2><ul>\n<li><p><strong>@extend</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.error</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> <span class=\"number\">#f00</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#fdd</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.seriousError</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">@extend</span> .error;</span><br><span class=\"line\">  <span class=\"attribute\">border-width</span>: <span class=\"number\">3px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>将error的样式继承给seriousError</p>\n</li>\n<li><p><strong>选择器</strong><br>选择器&gt;、+和~</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">header</span> &gt; <span class=\"selector-tag\">p</span> &#123; <span class=\"attribute\">font-size</span>: <span class=\"number\">1.1em</span> &#125;</span><br></pre></td></tr></table></figure>\n<p>选择article 后面紧跟着的子元素中的section元素</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">header</span> + <span class=\"selector-tag\">p</span> &#123; <span class=\"attribute\">font-size</span>: <span class=\"number\">1.1em</span> &#125;</span><br></pre></td></tr></table></figure>\n<p>选择header  后面紧跟的p元素</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">header</span> ~ <span class=\"selector-tag\">p</span> &#123; <span class=\"attribute\">font-size</span>: <span class=\"number\">1.1em</span> &#125;</span><br></pre></td></tr></table></figure>\n<p>选择header  同一层的p元素</p>\n</li>\n<li><p><strong>&amp;</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#main</span> &#123;</span><br><span class=\"line\">  $<span class=\"attribute\">width</span>: <span class=\"number\">5em</span> !global;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: $width;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#sidebar</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: $width;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>变量&amp;开头, ！global可将块级作用域变为全局左作用域</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">p</span>:before &#123;</span><br><span class=\"line\">  content: <span class=\"string\">&quot;I ate #&#123;5 + 10&#125; pies!&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">  $<span class=\"attribute\">font-size</span>: <span class=\"number\">12px</span>;</span><br><span class=\"line\">  $<span class=\"attribute\">line-height</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font</span>: #&#123;$font-size&#125;/#&#123;$<span class=\"attribute\">line-height</span>&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>#{}为动态变量</p>\n</li>\n<li><p><strong>mixin</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//$point 是参数</span><br><span class=\"line\"><span class=\"keyword\">@mixin</span> breakpoint($point)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">@media</span> <span class=\"keyword\">only</span> screen <span class=\"keyword\">and</span> (<span class=\"attribute\">max-width</span>: $point) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">@content</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@mixin</span> point-sm&#123;</span><br><span class=\"line\">    <span class=\"keyword\">@include</span> breakpoint($breakpoint-sm)&#123;</span><br><span class=\"line\">        //此处可加其他自定义样式代码</span><br><span class=\"line\">        <span class=\"keyword\">@content</span>;    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@mixin</span> point-md&#123;</span><br><span class=\"line\">    <span class=\"keyword\">@include</span> breakpoint($breakpoint-md)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">@content</span>;    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@mixin</span> point-lg&#123;</span><br><span class=\"line\">    <span class=\"keyword\">@include</span> breakpoint($breakpoint-lg)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">@content</span>;    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@mixin</span> point-xlg&#123;</span><br><span class=\"line\">    <span class=\"keyword\">@include</span> breakpoint($breakpoint-xlg)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">@content</span>;    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">.demo&#123;</span></span><br><span class=\"line\"><span class=\"comment\">    @include point-sm&#123;</span></span><br><span class=\"line\"><span class=\"comment\">        background: #ccc;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"js继承的6种方式","date":"2021-09-25T06:12:36.000Z","_content":"# 先定义一个公共父类\n```javascript\nfunction person(name){\n    this.name = name\n    this.sum = function(){\n        console.log(this.name)\n    }\n}\n```\n- **原型链继承**\n原理：让新实例的原型等于父类的实例\n```javascript\nperson.prototype.age = 10\nvar p = new person()\n//新类\nfunction animal(){\n    this.type = 'tiger'\n}\nanimal.prototype = new person()\nvar cat = new animal()\nconsole.log(cat.age) // 10\n```\n特点：\n1、实例可继承的属性有：实例的构造函数的属性，父类构造函数属性，父类原型的属性。（新实例不会继承父类实例的属性！）\n缺点：\n1、新实例无法向父类构造函数传参。\n2、继承单一。\n3、所有新实例都会共享父类实例的属性。（原型上的属性是共享的，一个实例修改了原型属性，另一个实例的原型属性也会被修改！）\n\n- **call和apply**\n原理：用call，apply将父类构造函数引入子类函数\n```javascript\nfunction con(){\n    person.call(this,\"con\")\n    this.age = 12\n}\nvar con1 = new con()\n```\n特点：\n1、只继承了父类构造函数的属性，没有继承父类原型的属性。\n2、解决了原型链继承缺点\n3、可以继承多个构造函数属性（call多个）。\n4、在子实例中可向父实例传参。\n缺点：\n1、只能继承父类构造函数的属性。\n2、无法实现构造函数的复用。（每次用每次都要重新调用）\n3、每个新实例都有父类构造函数的副本，臃肿。\n\n- **组合继承（结合上面两种）（常用）**\n```javascript\nfunction plane(name){\n    person.call(this,name)\n}\nplane.prototype = new person()\n```\n特点：\n1、可以继承父类原型上的属性，可以传参，可复用。\n2、每个新实例引入的构造函数属性是私有的。\n缺点：\n调用了两次父类构造函数（耗内存），子类的构造函数会代替原型上的那个父类构造函数。\n\n- **原型式继承**\n```javascript\nfunction content(obj){\n    function fn(){}\n    fn.prototype = obj\n    return new fn()\n}\nvar personer = new person()\nvar personera = content(personer)\nconsole.log(personera.age) //10\n```\n特点：类似于复制一个对象，用函数来包装。\n缺点：\n1、所有实例都会继承原型上的属性。\n2、无法实现复用。（新实例属性都是后面添加的）\n3、无法传入属性\n\n- **寄生式继承**\n```JavaScript\nfunction content(obj){\n    function fn(){}\n    fn.prototype = obj\n    return new fn()\n}\nvar a = new person()\nfunction subcontent(obj){\n    var b = new person()\n    b.name = \"leo\"\n    return b\n}\nvar c = subcontent(a)\nconsole.log(c.name) //leo\n```\n\n- **寄生组合式继承**\n```javascript\nfunction content(obj){\n    function fn(){}\n    fn.prototype = obj\n    return new fn()\n}\nvar con = content(person.prototype)\n\nfunction Sub(){\n    person.call(this)\n}\nSub.prototype  = con\ncon.constructor = Sub\nvar sub1 = new Sub()\nconsole.log(sub1.age)\n```\n- **ES6class继承**\n```javascript\n//class 相当于es5中构造函数\n//class中定义方法时，前后不能加function，全部定义在class的protopyte属性中\n//class中定义的所有方法是不可枚举的\n//class中只能定义方法，不能定义对象，变量等\n//class和方法内默认都是严格模式\n//es5中constructor为隐式属性\nclass People{\n  constructor(name='wang',age='27'){\n    this.name = name;\n    this.age = age;\n  }\n  eat(){\n    console.log(`${this.name} ${this.age} eat food`)\n  }\n}\n//继承父类\nclass Woman extends People{ \n   constructor(name = 'ren',age = '27'){ \n     //继承父类属性\n     super(name, age); \n   } \n    eat(){ \n     //继承父类方法\n      super.eat() \n    } \n} \nlet wonmanObj=new Woman('xiaoxiami'); \nwonmanObj.eat();\n```\n","source":"_posts/js继承的6种方式.md","raw":"---\ntitle: js继承的6种方式\ndate: 2021-09-25 14:12:36\ntags:\n---\n# 先定义一个公共父类\n```javascript\nfunction person(name){\n    this.name = name\n    this.sum = function(){\n        console.log(this.name)\n    }\n}\n```\n- **原型链继承**\n原理：让新实例的原型等于父类的实例\n```javascript\nperson.prototype.age = 10\nvar p = new person()\n//新类\nfunction animal(){\n    this.type = 'tiger'\n}\nanimal.prototype = new person()\nvar cat = new animal()\nconsole.log(cat.age) // 10\n```\n特点：\n1、实例可继承的属性有：实例的构造函数的属性，父类构造函数属性，父类原型的属性。（新实例不会继承父类实例的属性！）\n缺点：\n1、新实例无法向父类构造函数传参。\n2、继承单一。\n3、所有新实例都会共享父类实例的属性。（原型上的属性是共享的，一个实例修改了原型属性，另一个实例的原型属性也会被修改！）\n\n- **call和apply**\n原理：用call，apply将父类构造函数引入子类函数\n```javascript\nfunction con(){\n    person.call(this,\"con\")\n    this.age = 12\n}\nvar con1 = new con()\n```\n特点：\n1、只继承了父类构造函数的属性，没有继承父类原型的属性。\n2、解决了原型链继承缺点\n3、可以继承多个构造函数属性（call多个）。\n4、在子实例中可向父实例传参。\n缺点：\n1、只能继承父类构造函数的属性。\n2、无法实现构造函数的复用。（每次用每次都要重新调用）\n3、每个新实例都有父类构造函数的副本，臃肿。\n\n- **组合继承（结合上面两种）（常用）**\n```javascript\nfunction plane(name){\n    person.call(this,name)\n}\nplane.prototype = new person()\n```\n特点：\n1、可以继承父类原型上的属性，可以传参，可复用。\n2、每个新实例引入的构造函数属性是私有的。\n缺点：\n调用了两次父类构造函数（耗内存），子类的构造函数会代替原型上的那个父类构造函数。\n\n- **原型式继承**\n```javascript\nfunction content(obj){\n    function fn(){}\n    fn.prototype = obj\n    return new fn()\n}\nvar personer = new person()\nvar personera = content(personer)\nconsole.log(personera.age) //10\n```\n特点：类似于复制一个对象，用函数来包装。\n缺点：\n1、所有实例都会继承原型上的属性。\n2、无法实现复用。（新实例属性都是后面添加的）\n3、无法传入属性\n\n- **寄生式继承**\n```JavaScript\nfunction content(obj){\n    function fn(){}\n    fn.prototype = obj\n    return new fn()\n}\nvar a = new person()\nfunction subcontent(obj){\n    var b = new person()\n    b.name = \"leo\"\n    return b\n}\nvar c = subcontent(a)\nconsole.log(c.name) //leo\n```\n\n- **寄生组合式继承**\n```javascript\nfunction content(obj){\n    function fn(){}\n    fn.prototype = obj\n    return new fn()\n}\nvar con = content(person.prototype)\n\nfunction Sub(){\n    person.call(this)\n}\nSub.prototype  = con\ncon.constructor = Sub\nvar sub1 = new Sub()\nconsole.log(sub1.age)\n```\n- **ES6class继承**\n```javascript\n//class 相当于es5中构造函数\n//class中定义方法时，前后不能加function，全部定义在class的protopyte属性中\n//class中定义的所有方法是不可枚举的\n//class中只能定义方法，不能定义对象，变量等\n//class和方法内默认都是严格模式\n//es5中constructor为隐式属性\nclass People{\n  constructor(name='wang',age='27'){\n    this.name = name;\n    this.age = age;\n  }\n  eat(){\n    console.log(`${this.name} ${this.age} eat food`)\n  }\n}\n//继承父类\nclass Woman extends People{ \n   constructor(name = 'ren',age = '27'){ \n     //继承父类属性\n     super(name, age); \n   } \n    eat(){ \n     //继承父类方法\n      super.eat() \n    } \n} \nlet wonmanObj=new Woman('xiaoxiami'); \nwonmanObj.eat();\n```\n","slug":"js继承的6种方式","published":1,"updated":"2021-09-26T02:37:07.235Z","_id":"cku0lzk0m0000ewvdcut9af10","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"先定义一个公共父类\"><a href=\"#先定义一个公共父类\" class=\"headerlink\" title=\"先定义一个公共父类\"></a>先定义一个公共父类</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">person</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.name = name</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.sum = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p><strong>原型链继承</strong><br>原理：让新实例的原型等于父类的实例</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">person.prototype.age = <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> person()</span><br><span class=\"line\"><span class=\"comment\">//新类</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">animal</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.type = <span class=\"string\">&#x27;tiger&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">animal.prototype = <span class=\"keyword\">new</span> person()</span><br><span class=\"line\"><span class=\"keyword\">var</span> cat = <span class=\"keyword\">new</span> animal()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(cat.age) <span class=\"comment\">// 10</span></span><br></pre></td></tr></table></figure>\n<p>特点：<br>1、实例可继承的属性有：实例的构造函数的属性，父类构造函数属性，父类原型的属性。（新实例不会继承父类实例的属性！）<br>缺点：<br>1、新实例无法向父类构造函数传参。<br>2、继承单一。<br>3、所有新实例都会共享父类实例的属性。（原型上的属性是共享的，一个实例修改了原型属性，另一个实例的原型属性也会被修改！）</p>\n</li>\n<li><p><strong>call和apply</strong><br>原理：用call，apply将父类构造函数引入子类函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">con</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    person.call(<span class=\"built_in\">this</span>,<span class=\"string\">&quot;con&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.age = <span class=\"number\">12</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> con1 = <span class=\"keyword\">new</span> con()</span><br></pre></td></tr></table></figure>\n<p>特点：<br>1、只继承了父类构造函数的属性，没有继承父类原型的属性。<br>2、解决了原型链继承缺点<br>3、可以继承多个构造函数属性（call多个）。<br>4、在子实例中可向父实例传参。<br>缺点：<br>1、只能继承父类构造函数的属性。<br>2、无法实现构造函数的复用。（每次用每次都要重新调用）<br>3、每个新实例都有父类构造函数的副本，臃肿。</p>\n</li>\n<li><p><strong>组合继承（结合上面两种）（常用）</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">plane</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">    person.call(<span class=\"built_in\">this</span>,name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">plane.prototype = <span class=\"keyword\">new</span> person()</span><br></pre></td></tr></table></figure>\n<p>特点：<br>1、可以继承父类原型上的属性，可以传参，可复用。<br>2、每个新实例引入的构造函数属性是私有的。<br>缺点：<br>调用了两次父类构造函数（耗内存），子类的构造函数会代替原型上的那个父类构造函数。</p>\n</li>\n<li><p><strong>原型式继承</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">content</span>(<span class=\"params\">obj</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">    fn.prototype = obj</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> fn()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> personer = <span class=\"keyword\">new</span> person()</span><br><span class=\"line\"><span class=\"keyword\">var</span> personera = content(personer)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(personera.age) <span class=\"comment\">//10</span></span><br></pre></td></tr></table></figure>\n<p>特点：类似于复制一个对象，用函数来包装。<br>缺点：<br>1、所有实例都会继承原型上的属性。<br>2、无法实现复用。（新实例属性都是后面添加的）<br>3、无法传入属性</p>\n</li>\n<li><p><strong>寄生式继承</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">content</span>(<span class=\"params\">obj</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">    fn.prototype = obj</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> fn()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> person()</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">subcontent</span>(<span class=\"params\">obj</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> b = <span class=\"keyword\">new</span> person()</span><br><span class=\"line\">    b.name = <span class=\"string\">&quot;leo&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> c = subcontent(a)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c.name) <span class=\"comment\">//leo</span></span><br></pre></td></tr></table></figure></li>\n<li><p><strong>寄生组合式继承</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">content</span>(<span class=\"params\">obj</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">    fn.prototype = obj</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> fn()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> con = content(person.prototype)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Sub</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    person.call(<span class=\"built_in\">this</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Sub.prototype  = con</span><br><span class=\"line\">con.constructor = Sub</span><br><span class=\"line\"><span class=\"keyword\">var</span> sub1 = <span class=\"keyword\">new</span> Sub()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sub1.age)</span><br></pre></td></tr></table></figure></li>\n<li><p><strong>ES6class继承</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//class 相当于es5中构造函数</span></span><br><span class=\"line\"><span class=\"comment\">//class中定义方法时，前后不能加function，全部定义在class的protopyte属性中</span></span><br><span class=\"line\"><span class=\"comment\">//class中定义的所有方法是不可枚举的</span></span><br><span class=\"line\"><span class=\"comment\">//class中只能定义方法，不能定义对象，变量等</span></span><br><span class=\"line\"><span class=\"comment\">//class和方法内默认都是严格模式</span></span><br><span class=\"line\"><span class=\"comment\">//es5中constructor为隐式属性</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">People</span></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">name=<span class=\"string\">&#x27;wang&#x27;</span>,age=<span class=\"string\">&#x27;27&#x27;</span></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">eat</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"built_in\">this</span>.name&#125;</span> <span class=\"subst\">$&#123;<span class=\"built_in\">this</span>.age&#125;</span> eat food`</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//继承父类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Woman</span> <span class=\"keyword\">extends</span> <span class=\"title\">People</span></span>&#123; </span><br><span class=\"line\">   <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">name = <span class=\"string\">&#x27;ren&#x27;</span>,age = <span class=\"string\">&#x27;27&#x27;</span></span>)</span>&#123; </span><br><span class=\"line\">     <span class=\"comment\">//继承父类属性</span></span><br><span class=\"line\">     <span class=\"built_in\">super</span>(name, age); </span><br><span class=\"line\">   &#125; </span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">eat</span>(<span class=\"params\"></span>)</span>&#123; </span><br><span class=\"line\">     <span class=\"comment\">//继承父类方法</span></span><br><span class=\"line\">      <span class=\"built_in\">super</span>.eat() </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"keyword\">let</span> wonmanObj=<span class=\"keyword\">new</span> Woman(<span class=\"string\">&#x27;xiaoxiami&#x27;</span>); </span><br><span class=\"line\">wonmanObj.eat();</span><br></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"先定义一个公共父类\"><a href=\"#先定义一个公共父类\" class=\"headerlink\" title=\"先定义一个公共父类\"></a>先定义一个公共父类</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">person</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.name = name</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.sum = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p><strong>原型链继承</strong><br>原理：让新实例的原型等于父类的实例</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">person.prototype.age = <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> person()</span><br><span class=\"line\"><span class=\"comment\">//新类</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">animal</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.type = <span class=\"string\">&#x27;tiger&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">animal.prototype = <span class=\"keyword\">new</span> person()</span><br><span class=\"line\"><span class=\"keyword\">var</span> cat = <span class=\"keyword\">new</span> animal()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(cat.age) <span class=\"comment\">// 10</span></span><br></pre></td></tr></table></figure>\n<p>特点：<br>1、实例可继承的属性有：实例的构造函数的属性，父类构造函数属性，父类原型的属性。（新实例不会继承父类实例的属性！）<br>缺点：<br>1、新实例无法向父类构造函数传参。<br>2、继承单一。<br>3、所有新实例都会共享父类实例的属性。（原型上的属性是共享的，一个实例修改了原型属性，另一个实例的原型属性也会被修改！）</p>\n</li>\n<li><p><strong>call和apply</strong><br>原理：用call，apply将父类构造函数引入子类函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">con</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    person.call(<span class=\"built_in\">this</span>,<span class=\"string\">&quot;con&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.age = <span class=\"number\">12</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> con1 = <span class=\"keyword\">new</span> con()</span><br></pre></td></tr></table></figure>\n<p>特点：<br>1、只继承了父类构造函数的属性，没有继承父类原型的属性。<br>2、解决了原型链继承缺点<br>3、可以继承多个构造函数属性（call多个）。<br>4、在子实例中可向父实例传参。<br>缺点：<br>1、只能继承父类构造函数的属性。<br>2、无法实现构造函数的复用。（每次用每次都要重新调用）<br>3、每个新实例都有父类构造函数的副本，臃肿。</p>\n</li>\n<li><p><strong>组合继承（结合上面两种）（常用）</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">plane</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">    person.call(<span class=\"built_in\">this</span>,name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">plane.prototype = <span class=\"keyword\">new</span> person()</span><br></pre></td></tr></table></figure>\n<p>特点：<br>1、可以继承父类原型上的属性，可以传参，可复用。<br>2、每个新实例引入的构造函数属性是私有的。<br>缺点：<br>调用了两次父类构造函数（耗内存），子类的构造函数会代替原型上的那个父类构造函数。</p>\n</li>\n<li><p><strong>原型式继承</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">content</span>(<span class=\"params\">obj</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">    fn.prototype = obj</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> fn()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> personer = <span class=\"keyword\">new</span> person()</span><br><span class=\"line\"><span class=\"keyword\">var</span> personera = content(personer)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(personera.age) <span class=\"comment\">//10</span></span><br></pre></td></tr></table></figure>\n<p>特点：类似于复制一个对象，用函数来包装。<br>缺点：<br>1、所有实例都会继承原型上的属性。<br>2、无法实现复用。（新实例属性都是后面添加的）<br>3、无法传入属性</p>\n</li>\n<li><p><strong>寄生式继承</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">content</span>(<span class=\"params\">obj</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">    fn.prototype = obj</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> fn()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> person()</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">subcontent</span>(<span class=\"params\">obj</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> b = <span class=\"keyword\">new</span> person()</span><br><span class=\"line\">    b.name = <span class=\"string\">&quot;leo&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> c = subcontent(a)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c.name) <span class=\"comment\">//leo</span></span><br></pre></td></tr></table></figure></li>\n<li><p><strong>寄生组合式继承</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">content</span>(<span class=\"params\">obj</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">    fn.prototype = obj</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> fn()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> con = content(person.prototype)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Sub</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    person.call(<span class=\"built_in\">this</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Sub.prototype  = con</span><br><span class=\"line\">con.constructor = Sub</span><br><span class=\"line\"><span class=\"keyword\">var</span> sub1 = <span class=\"keyword\">new</span> Sub()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sub1.age)</span><br></pre></td></tr></table></figure></li>\n<li><p><strong>ES6class继承</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//class 相当于es5中构造函数</span></span><br><span class=\"line\"><span class=\"comment\">//class中定义方法时，前后不能加function，全部定义在class的protopyte属性中</span></span><br><span class=\"line\"><span class=\"comment\">//class中定义的所有方法是不可枚举的</span></span><br><span class=\"line\"><span class=\"comment\">//class中只能定义方法，不能定义对象，变量等</span></span><br><span class=\"line\"><span class=\"comment\">//class和方法内默认都是严格模式</span></span><br><span class=\"line\"><span class=\"comment\">//es5中constructor为隐式属性</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">People</span></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">name=<span class=\"string\">&#x27;wang&#x27;</span>,age=<span class=\"string\">&#x27;27&#x27;</span></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">eat</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"built_in\">this</span>.name&#125;</span> <span class=\"subst\">$&#123;<span class=\"built_in\">this</span>.age&#125;</span> eat food`</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//继承父类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Woman</span> <span class=\"keyword\">extends</span> <span class=\"title\">People</span></span>&#123; </span><br><span class=\"line\">   <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">name = <span class=\"string\">&#x27;ren&#x27;</span>,age = <span class=\"string\">&#x27;27&#x27;</span></span>)</span>&#123; </span><br><span class=\"line\">     <span class=\"comment\">//继承父类属性</span></span><br><span class=\"line\">     <span class=\"built_in\">super</span>(name, age); </span><br><span class=\"line\">   &#125; </span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">eat</span>(<span class=\"params\"></span>)</span>&#123; </span><br><span class=\"line\">     <span class=\"comment\">//继承父类方法</span></span><br><span class=\"line\">      <span class=\"built_in\">super</span>.eat() </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"keyword\">let</span> wonmanObj=<span class=\"keyword\">new</span> Woman(<span class=\"string\">&#x27;xiaoxiami&#x27;</span>); </span><br><span class=\"line\">wonmanObj.eat();</span><br></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"正则表达式","date":"2021-09-26T07:37:51.000Z","_content":"- **RegExp**\n```javascript\n//第一种:内置对象RegExp\nlet regexp = new RegExp()\n//RegExp允许动态狗仔模式\nlet search = calsStr('...')\nlet regexp = new RegExp(search);\n//第二种:单斜杠包裹:  /..../\nlet regexp = /\\d:\\m0*/\n```\n- **修饰符**\ni: 不区分大小写\ng: 会匹配完所有字符\nm: 匹配多行\nu: unicode模式\ny: 粘滞模式\n\n- **字符类**\n\\d: 数字0-9\n\\s: 空格\n\\w: 单字符包括下划线_\n```javascript\nlet str = 'asds1123_ads'\nlet reg = /\\d_\\w/g\nconsole.log(str.match(reg))//['s_a']\n```\n反向类：\n\\D,\\S,\\M，取反\n点（.）是匹配“除换行符之外的任何字符”\n```javascript\nlet reg = /./\n```\n匹配任何字符\n```javascript\nlet reg = /./s\n```\n- **锚点**\n^:匹配文本开头\n$:匹配文本结尾\n```javascript\nlet str1 = \"Mary had a little lamb\";\nalert( /^Mary/.test(str1) ); // true\nlet str1 = \"it's fleece was white as snow\";\nalert( /snow$/.test(str1) ); // true\n//时间格式\nlet regexp = /^\\d\\d[:-]\\d\\d$/;\n```\n空字符串匹配\n```javascript\nlet reg = /^$/g\n```\n- **词边界**\n\\b\n有三种不同的位置可作为词边界：\n在字符串开头，如果第一个字符是单词字符 \\w。\n在字符串中的两个字符之间，其中一个是单词字符 \\w，另一个不是。\n在字符串末尾，如果最后一个字符是单词字符 \\w。\n```javascript\nalert( \"Hello, Java!\".match(/\\bJava\\b/) ); // Java\nalert( \"Hello, JavaScript!\".match(/\\bJava\\b/) ); // null\n```\n- **转义特殊字符**\n这里是包含所有特殊字符的列表：[ \\ ^ $ . | ? * + ( )\n在特殊字符前加上反斜杠: \\\n```javascript\nlet reg = /\\?/    // '?'\nlet reg2 = /\\(\\)/ // '()'\n```\n特殊情况: 转义 / 时使用new RegExp()可以不转义\n```javascript\nlet reg = /\\//   // '/'\nlet regexp = new RegExp(\"/\")\n```\n传递一个字符串（参数）给 new RegExp 时，我们需要双倍反斜杠 \\\\，因为字符串引号会消费其中的一个。\n```javascript\nlet regStr = \"\\\\d\\\\.\\\\d\";\nlet regexp = new RegExp(regStr);\n```\n\n- **集合和范围[...]**\n在方括号 […] 中的几个字符或者字符类意味着“搜索给定的字符中的任意一个”。\n集合：\n[eao] 意味着查找在 3 个字符 'a'、'e' 或者 `‘o’ 中的任意一个。\n```javascript\nlet reg = /[eao]/\n```\n范围:\n[a-z] 表示a到z范围内的字母\n[0-9] 表示0-9范围内的数字\n[0-9A-F] 表示两个范围：它搜索一个字符，满足数字 0 到 9 或字母 A 到 F。\n查找单词字符 \\w 或连字符 -，则该集合为 [\\w-]。\n\n排除范围： [^...]\n\n## 在 […] 中不转义 ##\n```javascript\nlet reg = /[-().^+]/\n```","source":"_posts/正则表达式.md","raw":"---\ntitle: 正则表达式\ndate: 2021-09-26 15:37:51\ntags:\n---\n- **RegExp**\n```javascript\n//第一种:内置对象RegExp\nlet regexp = new RegExp()\n//RegExp允许动态狗仔模式\nlet search = calsStr('...')\nlet regexp = new RegExp(search);\n//第二种:单斜杠包裹:  /..../\nlet regexp = /\\d:\\m0*/\n```\n- **修饰符**\ni: 不区分大小写\ng: 会匹配完所有字符\nm: 匹配多行\nu: unicode模式\ny: 粘滞模式\n\n- **字符类**\n\\d: 数字0-9\n\\s: 空格\n\\w: 单字符包括下划线_\n```javascript\nlet str = 'asds1123_ads'\nlet reg = /\\d_\\w/g\nconsole.log(str.match(reg))//['s_a']\n```\n反向类：\n\\D,\\S,\\M，取反\n点（.）是匹配“除换行符之外的任何字符”\n```javascript\nlet reg = /./\n```\n匹配任何字符\n```javascript\nlet reg = /./s\n```\n- **锚点**\n^:匹配文本开头\n$:匹配文本结尾\n```javascript\nlet str1 = \"Mary had a little lamb\";\nalert( /^Mary/.test(str1) ); // true\nlet str1 = \"it's fleece was white as snow\";\nalert( /snow$/.test(str1) ); // true\n//时间格式\nlet regexp = /^\\d\\d[:-]\\d\\d$/;\n```\n空字符串匹配\n```javascript\nlet reg = /^$/g\n```\n- **词边界**\n\\b\n有三种不同的位置可作为词边界：\n在字符串开头，如果第一个字符是单词字符 \\w。\n在字符串中的两个字符之间，其中一个是单词字符 \\w，另一个不是。\n在字符串末尾，如果最后一个字符是单词字符 \\w。\n```javascript\nalert( \"Hello, Java!\".match(/\\bJava\\b/) ); // Java\nalert( \"Hello, JavaScript!\".match(/\\bJava\\b/) ); // null\n```\n- **转义特殊字符**\n这里是包含所有特殊字符的列表：[ \\ ^ $ . | ? * + ( )\n在特殊字符前加上反斜杠: \\\n```javascript\nlet reg = /\\?/    // '?'\nlet reg2 = /\\(\\)/ // '()'\n```\n特殊情况: 转义 / 时使用new RegExp()可以不转义\n```javascript\nlet reg = /\\//   // '/'\nlet regexp = new RegExp(\"/\")\n```\n传递一个字符串（参数）给 new RegExp 时，我们需要双倍反斜杠 \\\\，因为字符串引号会消费其中的一个。\n```javascript\nlet regStr = \"\\\\d\\\\.\\\\d\";\nlet regexp = new RegExp(regStr);\n```\n\n- **集合和范围[...]**\n在方括号 […] 中的几个字符或者字符类意味着“搜索给定的字符中的任意一个”。\n集合：\n[eao] 意味着查找在 3 个字符 'a'、'e' 或者 `‘o’ 中的任意一个。\n```javascript\nlet reg = /[eao]/\n```\n范围:\n[a-z] 表示a到z范围内的字母\n[0-9] 表示0-9范围内的数字\n[0-9A-F] 表示两个范围：它搜索一个字符，满足数字 0 到 9 或字母 A 到 F。\n查找单词字符 \\w 或连字符 -，则该集合为 [\\w-]。\n\n排除范围： [^...]\n\n## 在 […] 中不转义 ##\n```javascript\nlet reg = /[-().^+]/\n```","slug":"正则表达式","published":1,"updated":"2021-09-26T11:04:31.666Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cku148rno0000gsvd60uy9xhx","content":"<ul>\n<li><p><strong>RegExp</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//第一种:内置对象RegExp</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> regexp = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>()</span><br><span class=\"line\"><span class=\"comment\">//RegExp允许动态狗仔模式</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> search = calsStr(<span class=\"string\">&#x27;...&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> regexp = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(search);</span><br><span class=\"line\"><span class=\"comment\">//第二种:单斜杠包裹:  /..../</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> regexp = <span class=\"regexp\">/\\d:\\m0*/</span></span><br></pre></td></tr></table></figure></li>\n<li><p><strong>修饰符</strong><br>i: 不区分大小写<br>g: 会匹配完所有字符<br>m: 匹配多行<br>u: unicode模式<br>y: 粘滞模式</p>\n</li>\n<li><p><strong>字符类</strong><br>\\d: 数字0-9<br>\\s: 空格<br>\\w: 单字符包括下划线_</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">&#x27;asds1123_ads&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> reg = <span class=\"regexp\">/\\d_\\w/g</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.match(reg))<span class=\"comment\">//[&#x27;s_a&#x27;]</span></span><br></pre></td></tr></table></figure>\n<p>反向类：<br>\\D,\\S,\\M，取反<br>点（.）是匹配“除换行符之外的任何字符”</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> reg = <span class=\"regexp\">/./</span></span><br></pre></td></tr></table></figure>\n<p>匹配任何字符</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> reg = <span class=\"regexp\">/./</span>s</span><br></pre></td></tr></table></figure></li>\n<li><p><strong>锚点</strong><br>^:匹配文本开头<br>$:匹配文本结尾</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str1 = <span class=\"string\">&quot;Mary had a little lamb&quot;</span>;</span><br><span class=\"line\">alert( <span class=\"regexp\">/^Mary/</span>.test(str1) ); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> str1 = <span class=\"string\">&quot;it&#x27;s fleece was white as snow&quot;</span>;</span><br><span class=\"line\">alert( <span class=\"regexp\">/snow$/</span>.test(str1) ); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"comment\">//时间格式</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> regexp = <span class=\"regexp\">/^\\d\\d[:-]\\d\\d$/</span>;</span><br></pre></td></tr></table></figure>\n<p>空字符串匹配</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> reg = <span class=\"regexp\">/^$/g</span></span><br></pre></td></tr></table></figure></li>\n<li><p><strong>词边界</strong><br>\\b<br>有三种不同的位置可作为词边界：<br>在字符串开头，如果第一个字符是单词字符 \\w。<br>在字符串中的两个字符之间，其中一个是单词字符 \\w，另一个不是。<br>在字符串末尾，如果最后一个字符是单词字符 \\w。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alert( <span class=\"string\">&quot;Hello, Java!&quot;</span>.match(<span class=\"regexp\">/\\bJava\\b/</span>) ); <span class=\"comment\">// Java</span></span><br><span class=\"line\">alert( <span class=\"string\">&quot;Hello, JavaScript!&quot;</span>.match(<span class=\"regexp\">/\\bJava\\b/</span>) ); <span class=\"comment\">// null</span></span><br></pre></td></tr></table></figure></li>\n<li><p><strong>转义特殊字符</strong><br>这里是包含所有特殊字符的列表：[ \\ ^ $ . | ? * + ( )<br>在特殊字符前加上反斜杠: \\</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> reg = <span class=\"regexp\">/\\?/</span>    <span class=\"comment\">// &#x27;?&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> reg2 = <span class=\"regexp\">/\\(\\)/</span> <span class=\"comment\">// &#x27;()&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>特殊情况: 转义 / 时使用new RegExp()可以不转义</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> reg = <span class=\"regexp\">/\\//</span>   <span class=\"comment\">// &#x27;/&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> regexp = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">&quot;/&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>传递一个字符串（参数）给 new RegExp 时，我们需要双倍反斜杠 \\，因为字符串引号会消费其中的一个。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> regStr = <span class=\"string\">&quot;\\\\d\\\\.\\\\d&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> regexp = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(regStr);</span><br></pre></td></tr></table></figure></li>\n<li><p><strong>集合和范围[…]</strong><br>在方括号 […] 中的几个字符或者字符类意味着“搜索给定的字符中的任意一个”。<br>集合：<br>[eao] 意味着查找在 3 个字符 ‘a’、’e’ 或者 `‘o’ 中的任意一个。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> reg = <span class=\"regexp\">/[eao]/</span></span><br></pre></td></tr></table></figure>\n<p>范围:<br>[a-z] 表示a到z范围内的字母<br>[0-9] 表示0-9范围内的数字<br>[0-9A-F] 表示两个范围：它搜索一个字符，满足数字 0 到 9 或字母 A 到 F。<br>查找单词字符 \\w 或连字符 -，则该集合为 [\\w-]。</p>\n</li>\n</ul>\n<p>排除范围： [^…]</p>\n<h2 id=\"在-…-中不转义\"><a href=\"#在-…-中不转义\" class=\"headerlink\" title=\"在 […] 中不转义\"></a>在 […] 中不转义</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> reg = <span class=\"regexp\">/[-().^+]/</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><p><strong>RegExp</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//第一种:内置对象RegExp</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> regexp = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>()</span><br><span class=\"line\"><span class=\"comment\">//RegExp允许动态狗仔模式</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> search = calsStr(<span class=\"string\">&#x27;...&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> regexp = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(search);</span><br><span class=\"line\"><span class=\"comment\">//第二种:单斜杠包裹:  /..../</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> regexp = <span class=\"regexp\">/\\d:\\m0*/</span></span><br></pre></td></tr></table></figure></li>\n<li><p><strong>修饰符</strong><br>i: 不区分大小写<br>g: 会匹配完所有字符<br>m: 匹配多行<br>u: unicode模式<br>y: 粘滞模式</p>\n</li>\n<li><p><strong>字符类</strong><br>\\d: 数字0-9<br>\\s: 空格<br>\\w: 单字符包括下划线_</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">&#x27;asds1123_ads&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> reg = <span class=\"regexp\">/\\d_\\w/g</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.match(reg))<span class=\"comment\">//[&#x27;s_a&#x27;]</span></span><br></pre></td></tr></table></figure>\n<p>反向类：<br>\\D,\\S,\\M，取反<br>点（.）是匹配“除换行符之外的任何字符”</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> reg = <span class=\"regexp\">/./</span></span><br></pre></td></tr></table></figure>\n<p>匹配任何字符</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> reg = <span class=\"regexp\">/./</span>s</span><br></pre></td></tr></table></figure></li>\n<li><p><strong>锚点</strong><br>^:匹配文本开头<br>$:匹配文本结尾</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str1 = <span class=\"string\">&quot;Mary had a little lamb&quot;</span>;</span><br><span class=\"line\">alert( <span class=\"regexp\">/^Mary/</span>.test(str1) ); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> str1 = <span class=\"string\">&quot;it&#x27;s fleece was white as snow&quot;</span>;</span><br><span class=\"line\">alert( <span class=\"regexp\">/snow$/</span>.test(str1) ); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"comment\">//时间格式</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> regexp = <span class=\"regexp\">/^\\d\\d[:-]\\d\\d$/</span>;</span><br></pre></td></tr></table></figure>\n<p>空字符串匹配</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> reg = <span class=\"regexp\">/^$/g</span></span><br></pre></td></tr></table></figure></li>\n<li><p><strong>词边界</strong><br>\\b<br>有三种不同的位置可作为词边界：<br>在字符串开头，如果第一个字符是单词字符 \\w。<br>在字符串中的两个字符之间，其中一个是单词字符 \\w，另一个不是。<br>在字符串末尾，如果最后一个字符是单词字符 \\w。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alert( <span class=\"string\">&quot;Hello, Java!&quot;</span>.match(<span class=\"regexp\">/\\bJava\\b/</span>) ); <span class=\"comment\">// Java</span></span><br><span class=\"line\">alert( <span class=\"string\">&quot;Hello, JavaScript!&quot;</span>.match(<span class=\"regexp\">/\\bJava\\b/</span>) ); <span class=\"comment\">// null</span></span><br></pre></td></tr></table></figure></li>\n<li><p><strong>转义特殊字符</strong><br>这里是包含所有特殊字符的列表：[ \\ ^ $ . | ? * + ( )<br>在特殊字符前加上反斜杠: \\</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> reg = <span class=\"regexp\">/\\?/</span>    <span class=\"comment\">// &#x27;?&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> reg2 = <span class=\"regexp\">/\\(\\)/</span> <span class=\"comment\">// &#x27;()&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>特殊情况: 转义 / 时使用new RegExp()可以不转义</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> reg = <span class=\"regexp\">/\\//</span>   <span class=\"comment\">// &#x27;/&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> regexp = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">&quot;/&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>传递一个字符串（参数）给 new RegExp 时，我们需要双倍反斜杠 \\，因为字符串引号会消费其中的一个。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> regStr = <span class=\"string\">&quot;\\\\d\\\\.\\\\d&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> regexp = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(regStr);</span><br></pre></td></tr></table></figure></li>\n<li><p><strong>集合和范围[…]</strong><br>在方括号 […] 中的几个字符或者字符类意味着“搜索给定的字符中的任意一个”。<br>集合：<br>[eao] 意味着查找在 3 个字符 ‘a’、’e’ 或者 `‘o’ 中的任意一个。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> reg = <span class=\"regexp\">/[eao]/</span></span><br></pre></td></tr></table></figure>\n<p>范围:<br>[a-z] 表示a到z范围内的字母<br>[0-9] 表示0-9范围内的数字<br>[0-9A-F] 表示两个范围：它搜索一个字符，满足数字 0 到 9 或字母 A 到 F。<br>查找单词字符 \\w 或连字符 -，则该集合为 [\\w-]。</p>\n</li>\n</ul>\n<p>排除范围： [^…]</p>\n<h2 id=\"在-…-中不转义\"><a href=\"#在-…-中不转义\" class=\"headerlink\" title=\"在 […] 中不转义\"></a>在 […] 中不转义</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> reg = <span class=\"regexp\">/[-().^+]/</span></span><br></pre></td></tr></table></figure>"},{"title":"class语法","date":"2021-09-28T06:11:20.000Z","_content":"\n- **常规写法**\n```javascript\nclass MyClass {\n  prop = value; // 属性\n\n  constructor(...) { // 构造器\n    // ...\n  }\n\n  method(...) {} // method\n\n  get something(...) {} // getter 方法\n  set something(...) {} // setter 方法\n\n  [Symbol.iterator]() {} // 有计算名称（computed name）的方法（此处为 symbol）\n  // ...\n}\n```\n\n- **继承**\nextends关键字\n```javascript\nclass parent{\n    constructor(name){\n        this.name = name\n    }\n    sayHi(){\n        console.log('hi')\n    }\n}\n\nclass user extends parent {\n    constructor(name,age){\n        //继承父类constructor\n        super()\n        this.age = age\n    }\n\n    sayHi(){\n        //如果需要在父类基础上新增功能\n        super.sayHi()\n        alert('hi user')\n\n        //如果完全重写\n        alert('hi user')\n    }\n}\n```\n\n- **静态属性和静态方法**\n```javascript\nclass User {\n  //静态方法用于实现属于该类但不属于该类任何特定对象的函数。\n  static staticMethod() {\n    alert(this === User);\n  }\n  static name = 'nyw'\n}\n\nUser.staticMethod(); // true\n```\n静态属性和方法是可被继承的。\n\n- **instanceof**\n语法\n```javascript\n obj instanceof Class\n```javascript\n","source":"_posts/class语法.md","raw":"---\ntitle: class语法\ndate: 2021-09-28 14:11:20\ntags:\n---\n\n- **常规写法**\n```javascript\nclass MyClass {\n  prop = value; // 属性\n\n  constructor(...) { // 构造器\n    // ...\n  }\n\n  method(...) {} // method\n\n  get something(...) {} // getter 方法\n  set something(...) {} // setter 方法\n\n  [Symbol.iterator]() {} // 有计算名称（computed name）的方法（此处为 symbol）\n  // ...\n}\n```\n\n- **继承**\nextends关键字\n```javascript\nclass parent{\n    constructor(name){\n        this.name = name\n    }\n    sayHi(){\n        console.log('hi')\n    }\n}\n\nclass user extends parent {\n    constructor(name,age){\n        //继承父类constructor\n        super()\n        this.age = age\n    }\n\n    sayHi(){\n        //如果需要在父类基础上新增功能\n        super.sayHi()\n        alert('hi user')\n\n        //如果完全重写\n        alert('hi user')\n    }\n}\n```\n\n- **静态属性和静态方法**\n```javascript\nclass User {\n  //静态方法用于实现属于该类但不属于该类任何特定对象的函数。\n  static staticMethod() {\n    alert(this === User);\n  }\n  static name = 'nyw'\n}\n\nUser.staticMethod(); // true\n```\n静态属性和方法是可被继承的。\n\n- **instanceof**\n语法\n```javascript\n obj instanceof Class\n```javascript\n","slug":"class语法","published":1,"updated":"2021-10-08T06:57:53.935Z","_id":"cku4tbhqz00001ovd96w370yu","comments":1,"layout":"post","photos":[],"link":"","content":"<ul>\n<li><p><strong>常规写法</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span> </span>&#123;</span><br><span class=\"line\">  prop = value; <span class=\"comment\">// 属性</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">...</span>)</span> &#123; <span class=\"comment\">// 构造器</span></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">method</span>(<span class=\"params\">...</span>)</span> &#123;&#125; <span class=\"comment\">// method</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">get</span> <span class=\"title\">something</span>(<span class=\"params\">...</span>) &#123;&#125; <span class=\"comment\">// getter 方法</span></span><br><span class=\"line\">  <span class=\"keyword\">set</span> <span class=\"title\">something</span>(<span class=\"params\">...</span>) &#123;&#125; <span class=\"comment\">// setter 方法</span></span><br><span class=\"line\"></span><br><span class=\"line\">  [<span class=\"built_in\">Symbol</span>.iterator]() &#123;&#125; <span class=\"comment\">// 有计算名称（computed name）的方法（此处为 symbol）</span></span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p><strong>继承</strong><br>extends关键字</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">parent</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">sayHi</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;hi&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">user</span> <span class=\"keyword\">extends</span> <span class=\"title\">parent</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">name,age</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//继承父类constructor</span></span><br><span class=\"line\">        <span class=\"built_in\">super</span>()</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age = age</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">sayHi</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//如果需要在父类基础上新增功能</span></span><br><span class=\"line\">        <span class=\"built_in\">super</span>.sayHi()</span><br><span class=\"line\">        alert(<span class=\"string\">&#x27;hi user&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//如果完全重写</span></span><br><span class=\"line\">        alert(<span class=\"string\">&#x27;hi user&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p><strong>静态属性和静态方法</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//静态方法用于实现属于该类但不属于该类任何特定对象的函数。</span></span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"title\">staticMethod</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    alert(<span class=\"built_in\">this</span> === User);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> name = <span class=\"string\">&#x27;nyw&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">User.staticMethod(); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>静态属性和方法是可被继承的。</p>\n</li>\n<li><p><strong>instanceof</strong><br>语法<br><code>javascript obj instanceof Class </code>javascript</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><p><strong>常规写法</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span> </span>&#123;</span><br><span class=\"line\">  prop = value; <span class=\"comment\">// 属性</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">...</span>)</span> &#123; <span class=\"comment\">// 构造器</span></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">method</span>(<span class=\"params\">...</span>)</span> &#123;&#125; <span class=\"comment\">// method</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">get</span> <span class=\"title\">something</span>(<span class=\"params\">...</span>) &#123;&#125; <span class=\"comment\">// getter 方法</span></span><br><span class=\"line\">  <span class=\"keyword\">set</span> <span class=\"title\">something</span>(<span class=\"params\">...</span>) &#123;&#125; <span class=\"comment\">// setter 方法</span></span><br><span class=\"line\"></span><br><span class=\"line\">  [<span class=\"built_in\">Symbol</span>.iterator]() &#123;&#125; <span class=\"comment\">// 有计算名称（computed name）的方法（此处为 symbol）</span></span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p><strong>继承</strong><br>extends关键字</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">parent</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">sayHi</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;hi&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">user</span> <span class=\"keyword\">extends</span> <span class=\"title\">parent</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">name,age</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//继承父类constructor</span></span><br><span class=\"line\">        <span class=\"built_in\">super</span>()</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age = age</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">sayHi</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//如果需要在父类基础上新增功能</span></span><br><span class=\"line\">        <span class=\"built_in\">super</span>.sayHi()</span><br><span class=\"line\">        alert(<span class=\"string\">&#x27;hi user&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//如果完全重写</span></span><br><span class=\"line\">        alert(<span class=\"string\">&#x27;hi user&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p><strong>静态属性和静态方法</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//静态方法用于实现属于该类但不属于该类任何特定对象的函数。</span></span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"title\">staticMethod</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    alert(<span class=\"built_in\">this</span> === User);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> name = <span class=\"string\">&#x27;nyw&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">User.staticMethod(); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>静态属性和方法是可被继承的。</p>\n</li>\n<li><p><strong>instanceof</strong><br>语法<br><code>javascript obj instanceof Class </code>javascript</p>\n</li>\n</ul>\n"},{"title":"小技巧","date":"2021-09-28T02:40:10.000Z","_content":"\n- **遍历类数组结构**\n```javascript\n[].forEach.call(argumnents,(item)=>{\n    ...\n})\n```\n\n- **使用Object.prototype.toString来揭示类型**\n```javascript\nlet s = Object.prototype.toString;\n\nalert( s.call(123) ); // [object Number]\nalert( s.call(null) ); // [object Null]\nalert( s.call(alert) ); // [object Function]\n```\n\n- **trycatch捕获Json错误**\n```javascript\nlet json = \"{ bad json }\";\n\ntry {\n\n  let user = JSON.parse(json); // <-- 当出现一个 error 时...\n  alert( user.name ); // 不工作\n\n} catch (e) {\n  // ...执行会跳转到这里并继续执行\n  alert( \"Our apologies, the data has errors, we'll try to request it one more time.\" );\n  alert( e.name );\n  alert( e.message );\n}\n```","source":"_posts/小技巧.md","raw":"---\ntitle: 小技巧\ndate: 2021-09-28 10:40:10\ntags:\n---\n\n- **遍历类数组结构**\n```javascript\n[].forEach.call(argumnents,(item)=>{\n    ...\n})\n```\n\n- **使用Object.prototype.toString来揭示类型**\n```javascript\nlet s = Object.prototype.toString;\n\nalert( s.call(123) ); // [object Number]\nalert( s.call(null) ); // [object Null]\nalert( s.call(alert) ); // [object Function]\n```\n\n- **trycatch捕获Json错误**\n```javascript\nlet json = \"{ bad json }\";\n\ntry {\n\n  let user = JSON.parse(json); // <-- 当出现一个 error 时...\n  alert( user.name ); // 不工作\n\n} catch (e) {\n  // ...执行会跳转到这里并继续执行\n  alert( \"Our apologies, the data has errors, we'll try to request it one more time.\" );\n  alert( e.name );\n  alert( e.message );\n}\n```","slug":"小技巧","published":1,"updated":"2021-10-08T06:58:51.298Z","_id":"cku4tbhr500011ovd1nl08qhw","comments":1,"layout":"post","photos":[],"link":"","content":"<ul>\n<li><p><strong>遍历类数组结构</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[].forEach.call(argumnents,<span class=\"function\">(<span class=\"params\">item</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></li>\n<li><p><strong>使用Object.prototype.toString来揭示类型</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> s = <span class=\"built_in\">Object</span>.prototype.toString;</span><br><span class=\"line\"></span><br><span class=\"line\">alert( s.call(<span class=\"number\">123</span>) ); <span class=\"comment\">// [object Number]</span></span><br><span class=\"line\">alert( s.call(<span class=\"literal\">null</span>) ); <span class=\"comment\">// [object Null]</span></span><br><span class=\"line\">alert( s.call(alert) ); <span class=\"comment\">// [object Function]</span></span><br></pre></td></tr></table></figure></li>\n<li><p><strong>trycatch捕获Json错误</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> json = <span class=\"string\">&quot;&#123; bad json &#125;&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> user = <span class=\"built_in\">JSON</span>.parse(json); <span class=\"comment\">// &lt;-- 当出现一个 error 时...</span></span><br><span class=\"line\">  alert( user.name ); <span class=\"comment\">// 不工作</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...执行会跳转到这里并继续执行</span></span><br><span class=\"line\">  alert( <span class=\"string\">&quot;Our apologies, the data has errors, we&#x27;ll try to request it one more time.&quot;</span> );</span><br><span class=\"line\">  alert( e.name );</span><br><span class=\"line\">  alert( e.message );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><p><strong>遍历类数组结构</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[].forEach.call(argumnents,<span class=\"function\">(<span class=\"params\">item</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></li>\n<li><p><strong>使用Object.prototype.toString来揭示类型</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> s = <span class=\"built_in\">Object</span>.prototype.toString;</span><br><span class=\"line\"></span><br><span class=\"line\">alert( s.call(<span class=\"number\">123</span>) ); <span class=\"comment\">// [object Number]</span></span><br><span class=\"line\">alert( s.call(<span class=\"literal\">null</span>) ); <span class=\"comment\">// [object Null]</span></span><br><span class=\"line\">alert( s.call(alert) ); <span class=\"comment\">// [object Function]</span></span><br></pre></td></tr></table></figure></li>\n<li><p><strong>trycatch捕获Json错误</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> json = <span class=\"string\">&quot;&#123; bad json &#125;&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> user = <span class=\"built_in\">JSON</span>.parse(json); <span class=\"comment\">// &lt;-- 当出现一个 error 时...</span></span><br><span class=\"line\">  alert( user.name ); <span class=\"comment\">// 不工作</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...执行会跳转到这里并继续执行</span></span><br><span class=\"line\">  alert( <span class=\"string\">&quot;Our apologies, the data has errors, we&#x27;ll try to request it one more time.&quot;</span> );</span><br><span class=\"line\">  alert( e.name );</span><br><span class=\"line\">  alert( e.message );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"Vue3新特性","date":"2021-09-29T06:52:00.000Z","_content":"\n","source":"_posts/Vue3新特性.md","raw":"---\ntitle: Vue3新特性\ndate: 2021-09-29 14:52:00\ntags:\n---\n\n","slug":"Vue3新特性","published":1,"updated":"2021-09-29T06:52:09.971Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cku5asw490000tcvd2kchdq4e","content":"","site":{"data":{}},"excerpt":"","more":""}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}